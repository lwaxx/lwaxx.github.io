<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lwaxx的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-16T09:30:09.077Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>李伟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十大排序算法（十） - 希尔排序算法</title>
    <link href="http://example.com/2023/09/16/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/16/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-16T09:03:55.000Z</published>
    <updated>2023-09-16T09:30:09.077Z</updated>
    
    <content type="html"><![CDATA[<p>希尔排序（Shell Sort）是一种插入排序的改进算法，它通过比较相距一定间隔的元素进行排序，逐步减小间隔，最终实现整体有序。本文将详细介绍希尔排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。</p><span id="more"></span><h3 id="希尔排序的基本思想"><a href="#希尔排序的基本思想" class="headerlink" title="希尔排序的基本思想"></a>希尔排序的基本思想</h3><p>希尔排序的核心思想是将整个待排序序列分割成若干个子序列，分别对这些子序列进行插入排序，然后逐步减小子序列的间隔，直到间隔为1，最终对整个序列进行一次插入排序。这样，插入排序的效率会得到大幅提升。</p><p>具体步骤如下：</p><ol><li><strong>确定间隔序列</strong>： 选择一个间隔序列，一般是逐步减半，直到间隔为1。</li><li><strong>间隔排序</strong>： 对间隔序列所对应的子序列进行插入排序。</li><li><strong>逐步缩小间隔</strong>： 重复第二步，逐步减小间隔，直到间隔为1，完成最终的插入排序。</li></ol><h3 id="希尔排序的示例"><a href="#希尔排序的示例" class="headerlink" title="希尔排序的示例"></a>希尔排序的示例</h3><p>让我们通过一个示例来理解希尔排序的工作原理。假设我们有一个整数数组 [12, 34, 54, 2, 3]，我们希望按升序排序它。</p><ol><li><strong>选择间隔序列</strong>： 假设我们选择间隔序列为 [2, 1]。</li><li><strong>间隔为2的排序</strong>： 分别对间隔为2的子序列进行插入排序。<ul><li>第一轮：[12, 3]  [34, 2]  [54]</li></ul></li><li><strong>间隔为1的排序</strong>： 对整个序列进行一次插入排序。<ul><li>第二轮：[3, 2, 12, 34, 54]<br>最终，我们得到了排序后的数组 [2, 3, 12, 34, 54]。</li></ul></li></ol><h3 id="希尔排序的时间复杂度"><a href="#希尔排序的时间复杂度" class="headerlink" title="希尔排序的时间复杂度"></a>希尔排序的时间复杂度</h3><p>希尔排序的时间复杂度取决于间隔序列的选择。一般来说，间隔序列的选择直接影响到希尔排序的性能。</p><ol><li><strong>最好情况时间复杂度</strong>： O(n log n)</li><li><strong>平均情况时间复杂度</strong>： 取决于间隔序列</li><li><strong>最坏情况时间复杂度</strong>： O(n^2)</li></ol><p>希尔排序是一种不稳定的排序算法，适用于中等大小的数据集。它是插入排序的改进版本，通过减小元素移动的距离来提高排序效率。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是希尔排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 希尔排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    gap = n // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, n):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt;= gap <span class="keyword">and</span> arr[j - gap] &gt; temp:</span><br><span class="line">                arr[j] = arr[j - gap]</span><br><span class="line">                j -= gap</span><br><span class="line">            arr[j] = temp</span><br><span class="line">        gap //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">shell_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure><p><strong>Go 希尔排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shellSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line">gap := n / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> gap &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := gap; i &lt; n; i++ &#123;</span><br><span class="line">temp := arr[i]</span><br><span class="line">j := i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j &gt;= gap &amp;&amp; arr[j-gap] &gt; temp &#123;</span><br><span class="line">arr[j] = arr[j-gap]</span><br><span class="line">j -= gap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[j] = temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gap /= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := []<span class="type">int</span>&#123;<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">shellSort(arr)</span><br><span class="line">fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 希尔排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp) &#123;</span><br><span class="line">                    arr[j] = arr[j - gap];</span><br><span class="line">                    j -= gap;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            gap /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        shellSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 希尔排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> gap = n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = arr[i];</span><br><span class="line">            <span class="type">int</span> j = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">                j -= gap;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gap /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    shellSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例代码展示了不同编程语言中的希尔排序算法实现。这些示例帮助你理解希尔排序的工作原理，并提供了可供参考和使用的代码示例。希尔排序是一种高效的排序算法，可以在大多数情况下获得不错的性能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;希尔排序（Shell Sort）是一种插入排序的改进算法，它通过比较相距一定间隔的元素进行排序，逐步减小间隔，最终实现整体有序。本文将详细介绍希尔排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（九） - 基数排序算法</title>
    <link href="http://example.com/2023/09/16/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/16/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-16T09:03:36.000Z</published>
    <updated>2023-09-16T09:29:01.054Z</updated>
    
    <content type="html"><![CDATA[<p>基数排序（Radix Sort）是一种非比较性的排序算法，它将整数按位数逐个排序，每个位数的排序采用稳定的排序算法，最终得到有序序列。本文将详细介绍基数排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。</p><span id="more"></span><h3 id="基数排序的基本思想"><a href="#基数排序的基本思想" class="headerlink" title="基数排序的基本思想"></a>基数排序的基本思想</h3><p>基数排序的核心思想是将整数按位数切割成不同的数字，然后按每个位上的数字分组。具体步骤如下：</p><ol><li>确定位数： 确定待排序整数的最大位数，作为排序的轮数。</li><li>按位分组： 将整数按位数分成个位、十位、百位等不同组，从最低位开始。</li><li>每个位上的排序： 对每个位上的数字进行稳定排序，可以选择计数排序等。</li><li>合并： 合并每个位上的数字，得到最终有序序列。</li></ol><h3 id="基数排序的示例"><a href="#基数排序的示例" class="headerlink" title="基数排序的示例"></a>基数排序的示例</h3><p>让我们通过一个示例来理解基数排序的工作原理。假设我们有一个整数数组 [170, 45, 75, 90, 802, 24, 2, 66]，我们希望按升序排序它。</p><ol><li><strong>确定位数</strong>： 最大整数是802，有3位数字，因此需要3轮排序。</li><li><strong>按位分组</strong>： 将整数按个位数字分组。<ul><li>桶0: [170, 90]</li><li>桶1: [801]</li><li>桶2: [802, 2]</li><li>桶3: []</li><li>桶4: []</li><li>桶5: [75]</li><li>桶6: [66]</li><li>桶7: []</li><li>桶8: []</li><li>桶9: [45, 24]</li></ul></li><li><strong>每个位上的排序</strong>： 对每个位上的数字进行稳定排序，这里选择计数排序。<ul><li>第一轮（个位）： 170, 90, 801, 802, 2, 75, 66, 45, 24</li><li>第二轮（十位）： 801, 802, 2, 24, 45, 66, 75, 170, 90</li><li>第三轮（百位）： 2, 24, 45, 66, 75, 90, 170, 801, 802</li></ul></li><li><strong>合并</strong>： 得到最终有序序列。<ul><li>排序后的数组: [2, 24, 45, 66, 75, 90, 170, 801, 802]</li></ul></li></ol><h3 id="基数排序的时间复杂度"><a href="#基数排序的时间复杂度" class="headerlink" title="基数排序的时间复杂度"></a>基数排序的时间复杂度</h3><p>基数排序的时间复杂度取决于稳定排序算法的时间复杂度以及位数。假设n是待排序元素的数量，k是元素的位数，t是稳定排序算法的时间复杂度。</p><ol><li><strong>每位的排序时间</strong>： O(n + t)</li><li><strong>总的排序时间</strong>： O(k * (n + t))<br>综合起来，基数排序的时间复杂度为O(k * (n + t))。</li></ol><p>基数排序是一种稳定的排序算法，适用于整数排序。它在元素位数较小且范围确定的情况下表现出色。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是基数排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 基数排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counting_sort</span>(<span class="params">arr, exp</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    output = [<span class="number">0</span>] * n</span><br><span class="line">    count = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计每个位上的数字出现次数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        index = arr[i] // exp</span><br><span class="line">        count[index % <span class="number">10</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算累积频次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据位数排序</span></span><br><span class="line">    i = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">        index = arr[i] // exp</span><br><span class="line">        output[count[index % <span class="number">10</span>] - <span class="number">1</span>] = arr[i]</span><br><span class="line">        count[index % <span class="number">10</span>] -= <span class="number">1</span></span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将排序结果复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        arr[i] = output[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    max_num = <span class="built_in">max</span>(arr)</span><br><span class="line">    exp = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> max_num // exp &gt; <span class="number">0</span>:</span><br><span class="line">        counting_sort(arr, exp)</span><br><span class="line">        exp *= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>]</span><br><span class="line">radix_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure><p><strong>Go 基数排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countingSort</span><span class="params">(arr []<span class="type">int</span>, exp <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line">output := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">count := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计每个位上的数字出现次数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">index := arr[i] / exp % <span class="number">10</span></span><br><span class="line">count[index]++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算累积频次</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">count[i] += count[i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据位数排序</span></span><br><span class="line"><span class="keyword">for</span> i := n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">index := arr[i] / exp % <span class="number">10</span></span><br><span class="line">output[count[index]<span class="number">-1</span>] = arr[i]</span><br><span class="line">count[index]--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将排序结果复制回原数组</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">arr[i] = output[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">radixSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">maxNum := arr[<span class="number">0</span>]</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到最大值</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[i] &gt; maxNum &#123;</span><br><span class="line">maxNum = arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exp := <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐位排序</span></span><br><span class="line"><span class="keyword">for</span> maxNum/exp &gt; <span class="number">0</span> &#123;</span><br><span class="line">countingSort(arr, exp)</span><br><span class="line">exp *= <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := []<span class="type">int</span>&#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;</span><br><span class="line">radixSort(arr)</span><br><span class="line">fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 基数排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> exp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> output[] = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> count[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计每个位上的数字出现次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arr[i] / exp % <span class="number">10</span>;</span><br><span class="line">            count[index]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算累积频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据位数排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arr[i] / exp % <span class="number">10</span>;</span><br><span class="line">            output[count[index] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            count[index]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将排序结果复制回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = output[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> Arrays.stream(arr).max().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (maxNum / exp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            countingSort(arr, exp);</span><br><span class="line">            exp *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">        radixSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 基数排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> <span class="built_in">exp</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> output[n];</span><br><span class="line">    <span class="type">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每个位上的数字出现次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count[(arr[i] / <span class="built_in">exp</span>) % <span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算累积频次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据位数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        output[count[(arr[i] / <span class="built_in">exp</span>) % <span class="number">10</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[(arr[i] / <span class="built_in">exp</span>) % <span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将排序结果复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> maxNum = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; maxNum) &#123;</span><br><span class="line">            maxNum = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="built_in">exp</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐位排序</span></span><br><span class="line">    <span class="keyword">while</span> (maxNum / <span class="built_in">exp</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        countingSort(arr, n, <span class="built_in">exp</span>);</span><br><span class="line">        <span class="built_in">exp</span> *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    radixSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例代码展示了不同编程语言中的基数排序算法实现。这些示例帮助你理解基数排序的工作原理，并提供了可供参考和使用的代码示例。基数排序是一种适用于整数排序的高效稳定的排序算法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;基数排序（Radix Sort）是一种非比较性的排序算法，它将整数按位数逐个排序，每个位数的排序采用稳定的排序算法，最终得到有序序列。本文将详细介绍基数排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（八） - 桶排序算法</title>
    <link href="http://example.com/2023/09/16/%E6%A1%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/16/%E6%A1%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-16T09:03:18.000Z</published>
    <updated>2023-09-16T09:29:20.358Z</updated>
    
    <content type="html"><![CDATA[<p>桶排序（Bucket Sort）是一种分布式排序算法，它根据元素的值将它们分散到不同的桶中，并对每个桶中的元素进行排序。最后，将所有非空桶的元素按照顺序合并成排序后的数组。本文将详细介绍桶排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。</p><span id="more"></span><h3 id="桶排序的基本思想"><a href="#桶排序的基本思想" class="headerlink" title="桶排序的基本思想"></a>桶排序的基本思想</h3><p>桶排序的核心思想是将待排序的元素根据其值分配到不同的桶中，然后对每个桶中的元素进行独立排序，最后将所有桶合并为一个有序序列。</p><p>具体步骤如下：</p><ol><li><strong>桶的设置</strong>： 根据待排序元素的特性，确定需要设置多少个桶以及每个桶的范围。</li><li><strong>元素分配</strong>： 将待排序元素根据其值分配到相应的桶中。</li><li><strong>每个桶排序</strong>： 对每个非空桶中的元素进行独立排序，可以选择不同的排序算法。</li><li><strong>桶的合并</strong>： 将所有非空桶中的元素合并成排序后的数组。</li></ol><h3 id="桶排序的示例"><a href="#桶排序的示例" class="headerlink" title="桶排序的示例"></a>桶排序的示例</h3><p>让我们通过一个示例来理解桶排序的工作原理。假设我们有一个浮点数数组 [0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434]，我们希望按升序排序它。</p><ol><li><strong>设置桶</strong>： 假设我们设置3个桶，分别对应范围[0, 0.3333), [0.3333, 0.6666), [0.6666, 1.0)。</li><li><strong>元素分配</strong>： 将元素分配到对应的桶中。<ul><li>桶1: [0.1234]</li><li>桶2: [0.565, 0.656]</li><li>桶3: [0.897, 0.665, 0.3434]</li></ul></li><li><strong>每个桶排序</strong>： 对每个桶中的元素进行排序。<ul><li>桶1: [0.1234]</li><li>桶2: [0.565, 0.656]</li><li>桶3: [0.3434, 0.665, 0.897]</li></ul></li><li><strong>桶的合并</strong>： 将所有非空桶中的元素合并成排序后的数组。<ul><li>排序后的数组: [0.1234, 0.3434, 0.565, 0.656, 0.665, 0.897]</li></ul></li></ol><h3 id="桶排序的时间复杂度"><a href="#桶排序的时间复杂度" class="headerlink" title="桶排序的时间复杂度"></a>桶排序的时间复杂度</h3><p>桶排序的时间复杂度取决于桶的数量和每个桶中元素的排序算法。假设n是待排序元素的数量，k是桶的数量，t是桶内排序的平均时间复杂度。</p><ol><li>桶分配时间： O(n)</li><li>每个桶内排序时间： O(k * t)</li><li>桶的合并时间： O(n)<br>综合起来，桶排序的时间复杂度为O(n + k * t)，其中k和t取决于具体实现和数据分布。</li></ol><p>桶排序是一种稳定的排序算法，适用于分布均匀的数据。它在对浮点数等分布广泛的数据排序时表现出色。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是桶排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 桶排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="comment"># 确定桶的数量</span></span><br><span class="line">    num_buckets = <span class="built_in">len</span>(arr)</span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_buckets)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将元素分配到对应的桶中</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">        bucket_index = <span class="built_in">int</span>(num * num_buckets)</span><br><span class="line">        buckets[bucket_index].append(num)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对每个非空桶进行排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_buckets):</span><br><span class="line">        buckets[i].sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并桶</span></span><br><span class="line">    sorted_arr = []</span><br><span class="line">    <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets:</span><br><span class="line">        sorted_arr.extend(bucket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">0.897</span>, <span class="number">0.565</span>, <span class="number">0.656</span>, <span class="number">0.1234</span>, <span class="number">0.665</span>, <span class="number">0.3434</span>]</span><br><span class="line">sorted_arr = bucket_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, sorted_arr)</span><br></pre></td></tr></table></figure><p><strong>Go 桶排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bucketSort</span><span class="params">(arr []<span class="type">float64</span>)</span></span> []<span class="type">float64</span> &#123;</span><br><span class="line">numBuckets := <span class="built_in">len</span>(arr)</span><br><span class="line">buckets := <span class="built_in">make</span>([][]<span class="type">float64</span>, numBuckets)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素分配到对应的桶中</span></span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> arr &#123;</span><br><span class="line">bucketIndex := <span class="type">int</span>(num * <span class="type">float64</span>(numBuckets))</span><br><span class="line">buckets[bucketIndex] = <span class="built_in">append</span>(buckets[bucketIndex], num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每个非空桶进行排序</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numBuckets; i++ &#123;</span><br><span class="line">sort.Float64s(buckets[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并桶</span></span><br><span class="line">sortedArr := <span class="built_in">make</span>([]<span class="type">float64</span>, <span class="number">0</span>, <span class="built_in">len</span>(arr))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numBuckets; i++ &#123;</span><br><span class="line">sortedArr = <span class="built_in">append</span>(sortedArr, buckets[i]...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sortedArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := []<span class="type">float64</span>&#123;<span class="number">0.897</span>, <span class="number">0.565</span>, <span class="number">0.656</span>, <span class="number">0.1234</span>, <span class="number">0.665</span>, <span class="number">0.3434</span>&#125;</span><br><span class="line">sortedArr := bucketSort(arr)</span><br><span class="line">fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, sortedArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 桶排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BucketSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span>[] bucketSort(<span class="type">double</span>[] arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numBuckets</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        List&lt;Double&gt;[] buckets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[numBuckets];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numBuckets; i++) &#123;</span><br><span class="line">            buckets[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将元素分配到对应的桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">double</span> num : arr) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bucketIndex</span> <span class="operator">=</span> (<span class="type">int</span>) (num * numBuckets);</span><br><span class="line">            buckets[bucketIndex].add(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对每个非空桶进行排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numBuckets; i++) &#123;</span><br><span class="line">            buckets[i].sort(Double::compare);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并桶</span></span><br><span class="line">        <span class="type">double</span>[] sortedArr = <span class="keyword">new</span> <span class="title class_">double</span>[arr.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numBuckets; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">double</span> num : buckets[i]) &#123;</span><br><span class="line">                sortedArr[index++] = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sortedArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span>[] arr = &#123;<span class="number">0.897</span>, <span class="number">0.565</span>, <span class="number">0.656</span>, <span class="number">0.1234</span>, <span class="number">0.665</span>, <span class="number">0.3434</span>&#125;;</span><br><span class="line">        <span class="type">double</span>[] sortedArr = bucketSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(sortedArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 桶排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">double</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Bucket</span> &#123;</span></span><br><span class="line">    Node *head;</span><br><span class="line">&#125; Bucket;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>* <span class="title function_">bucketSort</span><span class="params">(<span class="type">double</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 确定桶的数量</span></span><br><span class="line">    <span class="type">int</span> numBuckets = n;</span><br><span class="line">    Bucket *buckets = (Bucket *)<span class="built_in">malloc</span>(numBuckets * <span class="keyword">sizeof</span>(Bucket));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化桶</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numBuckets; i++) &#123;</span><br><span class="line">        buckets[i].head = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素分配到对应的桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> bucketIndex = (<span class="type">int</span>)(arr[i] * numBuckets);</span><br><span class="line">        Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node-&gt;data = arr[i];</span><br><span class="line">        node-&gt;next = buckets[bucketIndex].head;</span><br><span class="line">        buckets[bucketIndex].head = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并桶并获取排序后的数组</span></span><br><span class="line">    <span class="type">double</span> *sortedArr = (<span class="type">double</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numBuckets; i++) &#123;</span><br><span class="line">        Node *current = buckets[i].head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            sortedArr[index++] = current-&gt;data;</span><br><span class="line">            Node *temp = current;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(buckets);</span><br><span class="line">    <span class="keyword">return</span> sortedArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">double</span> arr[] = &#123;<span class="number">0.897</span>, <span class="number">0.565</span>, <span class="number">0.656</span>, <span class="number">0.1234</span>, <span class="number">0.665</span>, <span class="number">0.3434</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">double</span> *sortedArr = bucketSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.4f &quot;</span>, sortedArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(sortedArr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例代码展示了不同编程语言中的桶排序算法实现。这些示例帮助你理解桶排序的工作原理，并提供了可供参考和使用的代码示例。桶排序是一种适用于分布广泛数据的高效排序算法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;桶排序（Bucket Sort）是一种分布式排序算法，它根据元素的值将它们分散到不同的桶中，并对每个桶中的元素进行排序。最后，将所有非空桶的元素按照顺序合并成排序后的数组。本文将详细介绍桶排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（七） - 计数排序算法</title>
    <link href="http://example.com/2023/09/16/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/16/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-16T09:03:02.000Z</published>
    <updated>2023-09-16T09:28:47.959Z</updated>
    
    <content type="html"><![CDATA[<p>计数排序（Counting Sort）是一种简单、高效的排序算法，它不基于比较，而是利用数组下标的计数来实现排序。本文将详细介绍计数排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。</p><span id="more"></span><h3 id="计数排序的基本思想"><a href="#计数排序的基本思想" class="headerlink" title="计数排序的基本思想"></a>计数排序的基本思想</h3><p>计数排序的核心思想是统计数组中每个元素的出现次数，然后根据元素的大小依次放置到有序的结果数组中。具体步骤如下：</p><ol><li><strong>统计频次</strong>： 遍历待排序数组，统计每个元素出现的频次，以数组的值为索引。</li><li><strong>计算累积频次</strong>： 计算每个元素的累积频次，确定元素在排序数组中的位置。</li><li><strong>构建有序数组</strong>： 根据元素的累积频次，将元素放入有序数组中，同时更新累积频次。</li></ol><p>计数排序的关键在于构建辅助数组，辅助数组用于存储每个元素的出现次数，以及计算每个元素在排序后的数组中的位置。</p><h3 id="计数排序的示例"><a href="#计数排序的示例" class="headerlink" title="计数排序的示例"></a>计数排序的示例</h3><p>让我们通过一个示例来理解计数排序的工作原理。假设我们有一个整数数组 [3, 1, 4, 1, 5, 9, 2, 6, 5]，我们希望按升序排序它。</p><ol><li><strong>统计频次</strong>： 统计每个元素的出现次数。<ul><li>待排序数组： [3, 1, 4, 1, 5, 9, 2, 6, 5]</li><li>频次数组：   [0, 1, 1, 1, 2, 1, 1, 0, 1]</li></ul></li><li><strong>计算累积频次</strong>： 计算每个元素的累积频次。<ul><li>累积频次数组： [0, 1, 2, 3, 5, 6, 7, 7, 8]</li></ul></li><li><strong>构建有序数组</strong>： 根据元素的累积频次，将元素放入有序数组中。<ul><li>排序后的数组： [1, 1, 2, 3, 4, 5, 5, 6, 9]</li></ul></li></ol><h3 id="计数排序的时间复杂度"><a href="#计数排序的时间复杂度" class="headerlink" title="计数排序的时间复杂度"></a>计数排序的时间复杂度</h3><p>计数排序的时间复杂度为O(n + k)，其中n是数组的长度，k是数组中元素的取值范围。计数排序的时间复杂度非常稳定，性能优异，尤其适合对整数进行排序。但需要注意，计数排序仅适用于非负整数或确定范围的整数排序。</p><p>计数排序是一种稳定的排序算法，通过对元素的频次统计和累积频次计算，实现了线性时间的排序。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是计数排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 计数排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counting_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    max_val = <span class="built_in">max</span>(arr)</span><br><span class="line">    counts = [<span class="number">0</span>] * (max_val + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计每个元素的频次</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">        counts[num] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算每个元素的累积频次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_val + <span class="number">1</span>):</span><br><span class="line">        counts[i] += counts[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建有序数组</span></span><br><span class="line">    sorted_arr = [<span class="number">0</span>] * <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        sorted_arr[counts[arr[i]] - <span class="number">1</span>] = arr[i]</span><br><span class="line">        counts[arr[i]] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">sorted_arr = counting_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, sorted_arr)</span><br></pre></td></tr></table></figure><p><strong>Go 计数排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countingSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    maxVal := arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        <span class="keyword">if</span> num &gt; maxVal &#123;</span><br><span class="line">            maxVal = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    counts := <span class="built_in">make</span>([]<span class="type">int</span>, maxVal+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每个元素的频次</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        counts[num]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算每个元素的累积频次</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= maxVal; i++ &#123;</span><br><span class="line">        counts[i] += counts[i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建有序数组</span></span><br><span class="line">    sortedArr := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(arr))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(arr) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        sortedArr[counts[arr[i]]<span class="number">-1</span>] = arr[i]</span><br><span class="line">        counts[arr[i]]--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sortedArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>&#125;</span><br><span class="line">    sortedArr := countingSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, sortedArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 计数排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountingSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] countingSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> Arrays.stream(arr).max().getAsInt();</span><br><span class="line">        <span class="type">int</span>[] counts = <span class="keyword">new</span> <span class="title class_">int</span>[maxVal + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计每个元素的频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            counts[num]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个元素的累积频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= maxVal; i++) &#123;</span><br><span class="line">            counts[i] += counts[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建有序数组</span></span><br><span class="line">        <span class="type">int</span>[] sortedArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sortedArr[counts[arr[i]] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            counts[arr[i]]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sortedArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] sortedArr = countingSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(sortedArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 计数排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> maxVal = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; maxVal) &#123;</span><br><span class="line">            maxVal = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *counts = (<span class="type">int</span> *)<span class="built_in">malloc</span>((maxVal + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> *sortedArr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化计数数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= maxVal; i++) &#123;</span><br><span class="line">        counts[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每个元素的频次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        counts[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算每个元素的累积频次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxVal; i++) &#123;</span><br><span class="line">        counts[i] += counts[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建有序数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sortedArr[counts[arr[i]] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        counts[arr[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将有序数组拷贝回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = sortedArr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(counts);</span><br><span class="line">    <span class="built_in">free</span>(sortedArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    countingSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例代码展示了不同编程语言中的计数排序算法实现。这些示例帮助你理解计数排序的工作原理，并提供了可供参考和使用的代码示例。计数排序是一种稳定且高效的排序算法，尤其适用于整数排序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;计数排序（Counting Sort）是一种简单、高效的排序算法，它不基于比较，而是利用数组下标的计数来实现排序。本文将详细介绍计数排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（六） - 堆排序算法</title>
    <link href="http://example.com/2023/09/14/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/14/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-14T14:12:37.000Z</published>
    <updated>2023-09-16T09:28:37.325Z</updated>
    
    <content type="html"><![CDATA[<p>堆排序（Heap Sort）是一种高效的、基于堆数据结构的排序算法，它具有稳定性和可预测的性能，适用于各种数据规模。本文将详细介绍堆排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。</p><span id="more"></span><h3 id="堆排序的基本思想"><a href="#堆排序的基本思想" class="headerlink" title="堆排序的基本思想"></a>堆排序的基本思想</h3><p>堆排序的核心思想是通过构建一个二叉堆，将待排序的数组转换为一个堆，然后反复从堆中取出最大（或最小）的元素，并将其放入已排序的部分。具体步骤如下：</p><ol><li><strong>构建堆</strong>： 将待排序的数组视为一个完全二叉树，并将其调整为一个堆，通常是一个最大堆（每个节点的值大于或等于其子节点的值）或最小堆（每个节点的值小于或等于其子节点的值）。</li><li><strong>取出根节点</strong>： 从堆中取出根节点元素，它是堆中的最大（或最小）元素。</li><li><strong>重建堆</strong>： 删除根节点后，将堆重新调整为合法的堆结构。</li><li><strong>重复操作</strong>： 重复步骤2和步骤3，直到堆中的元素为空。已经取出的元素会构成已排序部分。</li><li><strong>返回结果</strong>： 最终得到一个完全有序的数组。</li></ol><p>堆排序的关键在于构建堆和维护堆的性质，以确保每次取出的元素都是堆中的最大（或最小）元素。这一过程使得堆排序的时间复杂度保持在O(n*log(n))，并且在实际应用中表现出色。</p><h3 id="堆排序的示例"><a href="#堆排序的示例" class="headerlink" title="堆排序的示例"></a>堆排序的示例</h3><p>让我们通过一个示例来理解堆排序的工作原理。假设我们有一个整数数组 [5, 2, 9, 3, 4]，我们希望按升序排序它。</p><ol><li><strong>构建堆</strong>：首先将数组 [5, 2, 9, 3, 4] 转换为一个最大堆。最大堆的性质是父节点的值大于或等于其子节点的值。<ul><li>原始数组：[5, 2, 9, 3, 4]</li><li>最大堆：[9, 4, 5, 3, 2]</li></ul></li><li><strong>取出根节点</strong>：取出堆的根节点元素，即 9，并将其放入已排序的部分。</li><li><strong>重建堆</strong>：删除根节点后，重新调整堆结构，确保其满足最大堆的性质。<ul><li>剩余堆：[5, 4, 2, 3]</li></ul></li><li><strong>重复操作</strong>：重复步骤2和步骤3，直到堆中的元素为空。已经取出的元素会构成已排序部分。这个过程得到了一个升序排列的已排序数组 [2, 3, 4, 5, 9]。</li></ol><h3 id="堆排序的时间复杂度"><a href="#堆排序的时间复杂度" class="headerlink" title="堆排序的时间复杂度"></a>堆排序的时间复杂度</h3><p>堆排序的时间复杂度保持在O(n*log(n))，其中n是数组的长度。这使得它在处理大型数据集时具有出色的性能。堆排序不需要额外的存储空间，因此具有O(1)的空间复杂度。</p><p>堆排序的稳定性取决于堆的性质。如果使用最大堆来进行排序，相同元素的相对顺序可能会发生变化，因此它通常是不稳定的排序算法。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是堆排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 堆排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heapify</span>(<span class="params">arr, n, i</span>):</span><br><span class="line">    largest = i</span><br><span class="line">    left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> left &lt; n <span class="keyword">and</span> arr[left] &gt; arr[largest]:</span><br><span class="line">        largest = left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> arr[right] &gt; arr[largest]:</span><br><span class="line">        largest = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> largest != i:</span><br><span class="line">        arr[i], arr[largest] = arr[largest], arr[i]</span><br><span class="line">        heapify(arr, n, largest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建最大堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        heapify(arr, n, i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逐个取出堆中的元素并排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        arr[i], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[i]</span><br><span class="line">        heapify(arr, i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">heap_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure><p><strong>Go 堆排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(arr []<span class="type">int</span>, n <span class="type">int</span>, i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    largest := i</span><br><span class="line">    left := <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">    right := <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> left &lt; n &amp;&amp; arr[left] &gt; arr[largest] &#123;</span><br><span class="line">        largest = left</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> right &lt; n &amp;&amp; arr[right] &gt; arr[largest] &#123;</span><br><span class="line">        largest = right</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> largest != i &#123;</span><br><span class="line">        arr[i], arr[largest] = arr[largest], arr[i]</span><br><span class="line">        heapify(arr, n, largest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建最大堆</span></span><br><span class="line">    <span class="keyword">for</span> i := n/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        heapify(arr, n, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐个取出堆中的元素并排序</span></span><br><span class="line">    <span class="keyword">for</span> i := n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">        arr[i], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[i]</span><br><span class="line">        heapify(arr, i, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    heapSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 堆排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">largest</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">swap</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[largest];</span><br><span class="line">            arr[largest] = swap;</span><br><span class="line"></span><br><span class="line">            heapify(arr, n, largest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建最大堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapify(arr, n, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 逐个取出堆中的元素并排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line"></span><br><span class="line">            heapify(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        heapSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 堆排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">int</span> largest = i;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        <span class="type">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[largest];</span><br><span class="line">        arr[largest] = temp;</span><br><span class="line"></span><br><span class="line">        heapify(arr, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 构建最大堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐个取出堆中的元素并排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line"></span><br><span class="line">        heapify(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    heapSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例代码展示了不同编程语言中的堆排序算法实现。这些示例帮助你理解堆排序的工作原理，并提供了可供参考和使用的代码示例。堆排序是一种高效且稳定的排序算法，适用于各种应用场景，特别适合对大型数据集进行排序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;堆排序（Heap Sort）是一种高效的、基于堆数据结构的排序算法，它具有稳定性和可预测的性能，适用于各种数据规模。本文将详细介绍堆排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（五） - 归并排序算法</title>
    <link href="http://example.com/2023/09/14/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/14/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-14T14:12:22.000Z</published>
    <updated>2023-09-16T09:28:29.739Z</updated>
    
    <content type="html"><![CDATA[<p>归并排序（Merge Sort）是一种高效的、基于分治法的排序算法，它的稳定性和性能使其成为常用的排序方法之一。本文将详细介绍归并排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。</p><span id="more"></span><h3 id="归并排序的基本思想"><a href="#归并排序的基本思想" class="headerlink" title="归并排序的基本思想"></a>归并排序的基本思想</h3><p>归并排序的核心思想是将数组分成两个子数组，递归地对这两个子数组进行排序，然后将它们合并成一个有序数组。这个过程分为以下几个步骤：</p><ol><li><strong>分割数组</strong>： 将待排序的数组分成两个子数组，通常是平均分割。这一步持续递归，直到每个子数组只包含一个元素。</li><li><strong>递归排序</strong>： 递归地对左子数组和右子数组进行排序，直到它们都变成有序数组。</li><li><strong>合并数组</strong>： 将已排序的左子数组和右子数组合并成一个有序数组。合并的过程中，逐个比较左右两个数组的元素，并将较小的元素添加到结果数组中，直到两个数组都为空。</li><li><strong>返回结果</strong>： 最终得到一个完全排序好的数组。</li></ol><p>归并排序的关键在于合并过程，也就是如何将两个有序数组合并成一个有序数组。这一过程保持了相等元素的相对顺序，因此归并排序是一种稳定的排序算法。</p><h3 id="归并排序的示例"><a href="#归并排序的示例" class="headerlink" title="归并排序的示例"></a>归并排序的示例</h3><p>通过一个示例来理解归并排序的工作原理。假设我们有一个整数数组 [5, 2, 9, 3, 4]，我们希望按升序排序它。</p><ol><li><strong>分割数组</strong>： 首先将数组分成两个子数组 [5, 2] 和 [9, 3, 4]。</li><li><strong>递归排序</strong>： 分别对左子数组 [5, 2] 和右子数组 [9, 3, 4] 递归地应用归并排序。<ul><li>对左子数组 [5, 2] 进行归并排序，得到 [2, 5]。</li><li>对右子数组 [9, 3, 4] 进行归并排序，得到 [3, 4, 9]。</li></ul></li><li><strong>合并数组</strong>： 合并已排序的左子数组 [2, 5] 和右子数组 [3, 4, 9]。<ul><li>比较左右两个数组的首元素，选择较小的元素 2，将其添加到结果数组。</li><li>继续比较，选择 3，将其添加到结果数组。</li><li>接着选择 4、5、9，按顺序添加到结果数组。</li></ul></li><li><strong>返回结果</strong>： 最终，得到排序后的数组 [2, 3, 4, 5, 9]。</li></ol><h3 id="归并排序的时间复杂度"><a href="#归并排序的时间复杂度" class="headerlink" title="归并排序的时间复杂度"></a>归并排序的时间复杂度</h3><p>归并排序的时间复杂度非常稳定，始终为O(n*log(n))，其中n是数组的长度。这使得它适用于大型数据集和对稳定性有要求的情况。</p><p>尽管归并排序的时间复杂度相对较高，但它的性能稳定，对于各种数据集都表现出色。此外，归并排序是一种外部排序的重要算法，用于处理大型文件和数据库。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是归并排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 归并排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">    mid = <span class="built_in">len</span>(arr) // <span class="number">2</span></span><br><span class="line">    left = arr[:mid]</span><br><span class="line">    right = arr[mid:]</span><br><span class="line"></span><br><span class="line">    left = merge_sort(left)</span><br><span class="line">    right = merge_sort(right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">left, right</span>):</span><br><span class="line">    result = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt; right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    result.extend(left[i:])</span><br><span class="line">    result.extend(right[j:])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">sorted_arr = merge_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, sorted_arr)</span><br></pre></td></tr></table></figure><p><strong>Go 归并排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mid := <span class="built_in">len</span>(arr) / <span class="number">2</span></span><br><span class="line">    left := arr[:mid]</span><br><span class="line">    right := arr[mid:]</span><br><span class="line"></span><br><span class="line">    left = mergeSort(left)</span><br><span class="line">    right = mergeSort(right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(left, right []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    result := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(left) &amp;&amp; j &lt; <span class="built_in">len</span>(right) &#123;</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt; right[j] &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, left[i])</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, right[j])</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">append</span>(result, left[i:]...)</span><br><span class="line">    result = <span class="built_in">append</span>(result, right[j:]...)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sorted_arr := mergeSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, sorted_arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 归并排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(arr, left, mid);</span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">            merge(arr, left, mid, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> mid - left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> right - mid;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] leftArray = <span class="keyword">new</span> <span class="title class_">int</span>[n1];</span><br><span class="line">        <span class="type">int</span>[] rightArray = <span class="keyword">new</span> <span class="title class_">int</span>[n2];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">            leftArray[i] = arr[left + i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            rightArray[i] = arr[mid + <span class="number">1</span> + i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leftArray[i] &lt;= rightArray[j]) &#123;</span><br><span class="line">                arr[k] = leftArray[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = rightArray[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">            arr[k] = leftArray[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">            arr[k] = rightArray[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 归并排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n1 = mid - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n2 = right - mid;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> leftArray[n1], rightArray[n2];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">        leftArray[i] = arr[left + i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">        rightArray[i] = arr[mid + <span class="number">1</span> + i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = left;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftArray[i] &lt;= rightArray[j]) &#123;</span><br><span class="line">            arr[k] = leftArray[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = rightArray[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">        arr[k] = leftArray[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">        arr[k] = rightArray[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, left, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(arr, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    mergeSort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例代码展示了不同编程语言中的归并排序算法实现。这些示例帮助你理解归并排序的工作原理，并提供了可供参考和使用的代码示例。归并排序是一种稳定且高效的排序算法，适用于各种应用场景，特别适合对大型数据集进行排序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;归并排序（Merge Sort）是一种高效的、基于分治法的排序算法，它的稳定性和性能使其成为常用的排序方法之一。本文将详细介绍归并排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（四） - 快速排序算法</title>
    <link href="http://example.com/2023/09/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-13T13:26:17.000Z</published>
    <updated>2023-09-16T09:28:21.777Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序（Quick Sort）是一种高效的、分治法的排序算法，它在实际应用中被广泛采用，因为其性能优越。本文将详细介绍快速排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。</p><span id="more"></span><h3 id="快速排序的基本思想"><a href="#快速排序的基本思想" class="headerlink" title="快速排序的基本思想"></a>快速排序的基本思想</h3><p>快速排序的核心思想是通过选择一个基准元素，将数组划分为两个子数组：小于基准的子数组和大于基准的子数组。然后，递归地对这两个子数组进行排序，最后将它们合并起来，完成整个排序过程。</p><p>以下是快速排序的详细步骤：</p><ol><li><strong>选择基准元素</strong>： 从待排序的数组中选择一个基准元素。通常，我们选择第一个元素，但也可以使用其他策略，如随机选择。</li><li><strong>划分数组</strong>： 将数组中的元素按照与基准元素的比较结果划分为两个子数组，一个包含小于基准的元素，另一个包含大于基准的元素。</li><li><strong>递归排序</strong>： 对划分后的子数组递归地应用快速排序算法，分别排序小于基准的子数组和大于基准的子数组。</li><li><strong>合并结果</strong>： 最后，将已排序的子数组合并起来，形成最终有序的数组。</li></ol><p>快速排序的关键在于划分步骤，也就是如何选择基准元素和将元素分配到子数组的过程。这一过程的高效性使得快速排序在大多数情况下表现出色。</p><h3 id="快速排序的示例"><a href="#快速排序的示例" class="headerlink" title="快速排序的示例"></a>快速排序的示例</h3><p>让我们通过一个示例来理解快速排序的工作原理。假设我们有一个整数数组 [5, 2, 9, 3, 4]，我们希望按升序排序它。</p><ol><li><strong>选择基准元素</strong>： 我们选择第一个元素 5 作为基准。</li><li><strong>划分数组</strong>： 我们遍历数组并将小于等于基准的元素放在左边，大于基准的元素放在右边。在这个示例中，划分后的结果是 [2, 3, 4] [5] [9]。</li><li><strong>递归排序</strong>： 我们对左边的子数组 [2, 3, 4] 和右边的子数组 [9] 分别应用快速排序。</li><li><strong>合并结果</strong>： 最终，将左边的子数组 [2, 3, 4]、基准元素 5 和右边的子数组 [9] 合并起来，得到 [2, 3, 4, 5, 9]，这就是排序后的数组。</li></ol><h3 id="快速排序的时间复杂度"><a href="#快速排序的时间复杂度" class="headerlink" title="快速排序的时间复杂度"></a>快速排序的时间复杂度</h3><p>快速排序通常具有较快的平均运行时间，并且在许多情况下表现优异。其平均时间复杂度为O(n*log(n))，其中n是数组的长度。在最坏情况下，时间复杂度为O(n^2)，但这种情况较少发生，并且通过随机选择基准元素或使用三取样划分等方法可以避免。</p><p>与其他排序算法相比，快速排序通常更快，尤其是在处理大型数据集时。它是许多标准库中的默认排序算法，如Python的sorted()函数和Java的Arrays.sort()方法。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是快速排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 快速排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">    pivot = arr[<span class="number">0</span>]</span><br><span class="line">    less = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> x &lt;= pivot]</span><br><span class="line">    greater = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; pivot]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> quick_sort(less) + [pivot] + quick_sort(greater)</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">sorted_arr = quick_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, sorted_arr)</span><br></pre></td></tr></table></figure><p><strong>Go 快速排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pivot := arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> less, greater []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> arr[<span class="number">1</span>:] &#123;</span><br><span class="line">        <span class="keyword">if</span> v &lt;= pivot &#123;</span><br><span class="line">            less = <span class="built_in">append</span>(less, v)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            greater = <span class="built_in">append</span>(greater, v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    less = quickSort(less)</span><br><span class="line">    greater = quickSort(greater)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>(<span class="built_in">append</span>(less, pivot), greater...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sorted_arr := quickSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, sorted_arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 快速排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pivotIndex</span> <span class="operator">=</span> partition(arr, low, high);</span><br><span class="line">            quickSort(arr, low, pivotIndex - <span class="number">1</span>);</span><br><span class="line">            quickSort(arr, pivotIndex + <span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[low];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> low + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> high;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">                arr[left] = arr[right];</span><br><span class="line">                arr[right] = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[low];</span><br><span class="line">        arr[low] = arr[right];</span><br><span class="line">        arr[right] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 快速排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pivot = arr[low];</span><br><span class="line">    <span class="type">int</span> left = low + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right = high;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; arr[left] &lt;= pivot) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; arr[right] &gt;= pivot) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">            swap(&amp;arr[left], &amp;arr[right]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swap(&amp;arr[low], &amp;arr[right]);</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pivotIndex = partition(arr, low, high);</span><br><span class="line">        quickSort(arr, low, pivotIndex - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, pivotIndex + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    quickSort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例代码展示了不同编程语言中的快速排序算法实现。这些示例帮助你理解快速排序的工作原理，并提供了可供参考和使用的代码示例。无论使用哪种编程语言，快速排序都是一种高效的排序算法，适用于各种应用场景。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快速排序（Quick Sort）是一种高效的、分治法的排序算法，它在实际应用中被广泛采用，因为其性能优越。本文将详细介绍快速排序的工作原理，提供示例和Python、Go、Java以及C语言的实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（三） - 插入排序算法</title>
    <link href="http://example.com/2023/09/13/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/13/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-13T13:21:22.000Z</published>
    <updated>2023-09-16T09:27:51.404Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法是计算机科学中的基础概念，它们用于对数据集合进行有序排列。插入排序（Insertion Sort）是其中一种简单而有效的排序算法。本文将详细介绍插入排序的工作原理，并提供Python、Go、Java和C语言的示例代码。</p><span id="more"></span><h3 id="插入排序的基本思想"><a href="#插入排序的基本思想" class="headerlink" title="插入排序的基本思想"></a>插入排序的基本思想</h3><p>插入排序的基本思想是将数据分成已排序和未排序两部分，初始时已排序部分只包含第一个元素，而未排序部分包含其他元素。然后，它从未排序部分依次选择元素，将其插入到已排序部分的合适位置，直到所有元素都在已排序部分。</p><p>让我们通过一个简单的示例来理解插入排序的工作原理。假设我们有一个整数数组 [5, 2, 9, 3, 4]，我们希望按升序排序它。</p><ol><li><strong>初始状态</strong>： 首先，已排序部分只包含第一个元素 5，未排序部分包含其他元素 [2, 9, 3, 4]。</li><li><strong>第一次插入</strong>： 从未排序部分选择第一个元素 2，将它与已排序部分的 5 比较。因为 2 &lt; 5，所以 2 插入到 5 的前面，得到 [2, 5] 和 [9, 3, 4]。</li><li><strong>第二次插入</strong>： 继续选择未排序部分的第一个元素 9，将它与已排序部分的 5 和 2 比较。由于 9 &gt; 5，不需要交换。已排序部分保持不变 [2, 5]，未排序部分为 [3, 4]。</li><li><strong>继续插入</strong>： 依此类推，依次选择未排序部分的元素并插入到已排序部分的正确位置。最终，数组被完全排序成 [2, 3, 4, 5, 9]。</li></ol><p>插入排序的关键在于将元素逐个插入到已排序部分，并确保已排序部分始终保持升序。</p><h3 id="插入排序的时间复杂度"><a href="#插入排序的时间复杂度" class="headerlink" title="插入排序的时间复杂度"></a>插入排序的时间复杂度</h3><p>插入排序的时间复杂度取决于输入数据的顺序。在最好的情况下，即数据已经按升序排列，插入排序的时间复杂度为O(n)，其中n是数组的长度。这是因为在最好情况下，不需要执行元素交换，只需遍历一次数组。</p><p>在最坏的情况下，即数据逆序排列，插入排序的时间复杂度为O(n^2)，因为每个元素都需要与已排序部分的所有元素进行比较和移动。</p><p>插入排序在小型数据集上通常表现良好，但对于大型数据集，更高效的排序算法可能更合适。</p><h3 id="插入排序的应用场景"><a href="#插入排序的应用场景" class="headerlink" title="插入排序的应用场景"></a>插入排序的应用场景</h3><p>尽管插入排序不如一些高级排序算法那样高效，但它仍然有一些应用场景：</p><ol><li><strong>小型数据集</strong>： 插入排序在处理小型数据集时性能良好，因为其常数因子较低。</li><li><strong>部分有序数据</strong>： 如果数据集已经部分有序，插入排序的性能会较好，因为不需要多次交换元素。</li><li><strong>稳定性要求</strong>： 插入排序是一种稳定的排序算法，可以保持相同元素的相对位置。</li><li><strong>在线排序</strong>： 插入排序可以应用于在线排序场景，即数据不一次性全部可用，而是逐个元素到达。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是插入排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>Python 插入排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        key = arr[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> key &lt; arr[j]:</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = key</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">insertion_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure><p><strong>Go 插入排序</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertionSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        key := arr[i]</span><br><span class="line">        j := i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j &gt;= <span class="number">0</span> &amp;&amp; key &lt; arr[j] &#123;</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+<span class="number">1</span>] = key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    insertionSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 插入排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; key &lt; arr[j]) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        insertionSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C 语言 插入排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> key = arr[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; key &lt; arr[j]) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    insertionSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些示例代码演示了插入排序的工作原理，并提供了Python、Go、Java和C语言的不同语言版本的实现。插入排序虽然简单，但在一些特定情况下是一种有效的排序算法，特别适合处理小型数据集或部分有序的数据。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;排序算法是计算机科学中的基础概念，它们用于对数据集合进行有序排列。插入排序（Insertion Sort）是其中一种简单而有效的排序算法。本文将详细介绍插入排序的工作原理，并提供Python、Go、Java和C语言的示例代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（二） - 选择排序算法</title>
    <link href="http://example.com/2023/09/11/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/11/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-11T13:42:42.000Z</published>
    <updated>2023-09-16T09:28:08.981Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，排序是一个基本而重要的问题。排序算法有许多种，其中之一是选择排序（Selection Sort）。本文将深入介绍选择排序的工作原理，讨论其时间复杂度，以及提供Python、Go、Java和C语言的示例代码。</p><span id="more"></span><h3 id="选择排序的基本思想"><a href="#选择排序的基本思想" class="headerlink" title="选择排序的基本思想"></a>选择排序的基本思想</h3><p>选择排序是一种比较排序算法，其基本思想是将数组分为已排序和未排序两部分。在每一次迭代中，从未排序部分中选择最小（或最大）的元素，将其放入已排序部分的末尾。这个过程不断迭代，直到整个数组都有序。</p><p>为了更好地理解选择排序，让我们通过一个简单的示例来演示其工作原理。假设我们有一个整数数组 [5, 2, 9, 3, 4]，我们希望按升序排序它。</p><ol><li><strong>第一次选择</strong>： 初始时，整个数组都被视为未排序部分。我们找到未排序部分中的最小元素 2，然后将其与已排序部分的末尾交换。数组变为 [2, 5, 9, 3, 4]，已排序部分为 2，未排序部分为 [5, 9, 3, 4]。</li><li><strong>第二次选择</strong>： 现在，我们在未排序部分 [5, 9, 3, 4] 中找到最小元素 3，将其与已排序部分的末尾交换。数组变为 [2, 3, 9, 5, 4]，已排序部分为 2, 3，未排序部分为 [9, 5, 4]。</li><li><strong>第三次选择</strong>： 继续这个过程，我们找到未排序部分中的最小元素 4，将其与已排序部分的末尾交换。数组变为 [2, 3, 4, 5, 9]，已排序部分为 2, 3, 4，未排序部分为 [5, 9]。</li><li><strong>完成排序</strong>： 最后，未排序部分只剩下两个元素 [5, 9]，我们将它们依次加入已排序部分，得到完全有序的数组 [2, 3, 4, 5, 9]。</li></ol><p>这个过程不断迭代，每一次迭代都会将未排序部分中的最小元素添加到已排序部分，最终得到完全有序的数组。</p><h3 id="选择排序的时间复杂度"><a href="#选择排序的时间复杂度" class="headerlink" title="选择排序的时间复杂度"></a>选择排序的时间复杂度</h3><p>选择排序的时间复杂度在任何情况下都为O(n^2)，其中n是数组的长度。这是因为在每一次迭代中，都需要在未排序部分中查找最小元素，这需要进行n次比较。虽然选择排序的时间复杂度较高，但它的优点是不需要额外的内存空间，是一种稳定的排序算法。</p><h3 id="选择排序的应用场景"><a href="#选择排序的应用场景" class="headerlink" title="选择排序的应用场景"></a>选择排序的应用场景</h3><p>尽管选择排序不是最高效的排序算法，但它在某些情况下仍然有用：</p><ol><li><strong>小型数据集</strong>: 在处理小型数据集时，选择排序可能比其他复杂的排序算法更具可读性和实现简单性。</li><li><strong>内存有限的情况</strong>: 选择排序不需要额外的内存空间，适用于内存有限的环境。</li><li><strong>对稳定性有要求</strong>: 选择排序是一种稳定的排序算法，可以保持相同元素的相对位置。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是选择排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>python代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">selection_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure><p><strong>Go代码</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectionSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        minIndex := i</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[minIndex] &#123;</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    selectionSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[minIndex];</span><br><span class="line">            arr[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        selectionSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    selectionSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>这些示例代码演示了选择排序的工作原理，并提供了Python、Go、Java和C语言的不同语言版本的实现。选择排序是一种简单但不够高效的排序算法，通常在处理小型数据集或对稳定性要求较高的情况下使用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在计算机科学中，排序是一个基本而重要的问题。排序算法有许多种，其中之一是选择排序（Selection Sort）。本文将深入介绍选择排序的工作原理，讨论其时间复杂度，以及提供Python、Go、Java和C语言的示例代码。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法（一） - 冒泡排序算法</title>
    <link href="http://example.com/2023/09/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/09/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-09-10T01:27:48.000Z</published>
    <updated>2023-09-16T09:28:02.600Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法是计算机科学中的重要主题，而冒泡排序（Bubble Sort）则是最简单的排序算法之一。尽管它在大型数据集上效率较低，但它的工作原理非常直观，是理解排序算法的绝佳起点。本文将深入探讨冒泡排序的工作原理、时间复杂度以及应用场景。</p><span id="more"></span><h3 id="冒泡排序的基本思想"><a href="#冒泡排序的基本思想" class="headerlink" title="冒泡排序的基本思想"></a>冒泡排序的基本思想</h3><p>冒泡排序的基本思想非常简单：通过不断比较相邻的两个元素，如果它们的顺序不正确，就交换它们，直到整个数组都排好序。这个过程类似于气泡在液体中上浮的过程，因此得名冒泡排序。</p><p>让我们通过一个简单的示例来理解冒泡排序的工作原理。假设有一个整数数组 [5, 2, 9, 3, 4]，我们希望按升序排序它。<br>1.<strong>第一次冒泡</strong>： 从数组的起始位置开始，比较相邻的元素，即 5 和 2。因为 5 &gt; 2，所以它们的顺序不正确，需要交换它们。数组变为 [2, 5, 9, 3, 4]。<br>2.<strong>第二次冒泡</strong>： 接下来，比较 5 和 9。由于它们的顺序正确，不需要交换。数组保持不变。<br>3.<strong>第三次冒泡</strong>： 继续比较 9 和 3，发现它们的顺序不正确，需要交换。数组变为 [2, 5, 3, 9, 4]。<br>4.<strong>第四次冒泡</strong>： 最后，比较 9 和 4，同样发现它们的顺序不正确，需要交换。数组变为 [2, 5, 3, 4, 9]。</p><p>这个过程会不断迭代，每次迭代都会将最大的元素“冒泡”到数组的末尾。在一次迭代中，通过多次比较和交换，最大的元素将沿着数组一路上浮到正确的位置。这就是为什么它被称为“冒泡”排序。</p><h3 id="冒泡排序的时间复杂度"><a href="#冒泡排序的时间复杂度" class="headerlink" title="冒泡排序的时间复杂度"></a>冒泡排序的时间复杂度</h3><p>虽然冒泡排序的思想简单，但它的时间复杂度并不理想。在最坏情况下，冒泡排序需要进行 n-1 次迭代（n 为数组长度），每次迭代都要比较相邻的元素并进行交换。因此，最坏情况下的时间复杂度为 O(n^2)。这使得冒泡排序在处理大型数据集时效率较低。</p><p>值得注意的是，在最佳情况下（数组已经有序），冒泡排序只需要一次迭代，因此时间复杂度为 O(n)。但这种情况很少发生。</p><h3 id="冒泡排序的应用场景"><a href="#冒泡排序的应用场景" class="headerlink" title="冒泡排序的应用场景"></a>冒泡排序的应用场景</h3><p>冒泡排序的性能相对较差，通常不推荐在实际应用中使用，特别是对于大型数据集。然而，由于其简单的原理，冒泡排序仍然有一些应用场景：</p><p>1.<strong>教育和学习</strong>： 冒泡排序是教授排序算法的良好起点，因为它易于理解和实现。<br>2.<strong>小型数据集</strong>： 在处理小型数据集时，冒泡排序的性能可能比其他复杂的排序算法更好。<br>3.<strong>已接近有序的数据</strong>： 如果数据集已经基本有序，冒泡排序可能比其他算法更有效。<br>4.<strong>排序算法的可视化</strong>： 冒泡排序可以用于排序算法可视化工具，帮助人们更好地理解排序过程。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>以下是冒泡排序的示例代码，分别使用Python、Go、Java和C语言编写。</p><p><strong>python代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">bubble_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure><p><strong>Go代码</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    bubbleSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubbleSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些示例代码展示了如何使用不同编程语言编写冒泡排序算法，它们都具有相同的工作原理，只是语法有所不同。冒泡排序是一种简单但不够高效的排序算法，通常在实际应用中使用更高效的排序算法。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>冒泡排序虽然不是最高效的排序算法，但它的简单性和直观性使它成为学习排序算法的良好起点。在实际应用中，通常会选择更高效的排序算法，特别是对于大型数据集。然而，了解冒泡排序的工作原理有助于理解更复杂的排序算法，并为算法设计提供宝贵的启示。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;排序算法是计算机科学中的重要主题，而冒泡排序（Bubble Sort）则是最简单的排序算法之一。尽管它在大型数据集上效率较低，但它的工作原理非常直观，是理解排序算法的绝佳起点。本文将深入探讨冒泡排序的工作原理、时间复杂度以及应用场景。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>解析排序算法：十大排序方法的工作原理与性能比较</title>
    <link href="http://example.com/2023/09/10/%E8%A7%A3%E6%9E%90%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <id>http://example.com/2023/09/10/%E8%A7%A3%E6%9E%90%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/</id>
    <published>2023-09-10T01:17:10.000Z</published>
    <updated>2023-09-10T01:25:51.924Z</updated>
    
    <content type="html"><![CDATA[<p>当我们面临对数据进行排序的任务时，计算机科学家们开发了多种排序算法来满足不同的需求。这些排序算法各具特点，适用于不同规模和类型的数据集。在本文中，我们将介绍十大常见的排序算法，并讨论它们的工作原理、时间复杂度以及适用场景。</p><span id="more"></span><h3 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h3><p>冒泡排序是最简单的排序算法之一。它反复比较相邻的两个元素，如果它们的顺序不正确，就交换它们，直到整个数组都排好序。冒泡排序的时间复杂度为O(n^2)，适用于小型数据集，但在大型数据集上效率较低。</p><h3 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h3><p>选择排序将数组分为已排序和未排序两部分，然后选择未排序部分中的最小（或最大）元素，将其放在已排序部分的末尾。选择排序的时间复杂度也是O(n^2)，不稳定，适用于小型数据集。</p><h3 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h3><p>插入排序将数组分为已排序和未排序两部分，然后逐个将未排序部分的元素插入已排序部分的正确位置。插入排序的时间复杂度也是O(n^2)，但在某些情况下比冒泡和选择排序更快，特别适用于部分有序的数据。</p><h3 id="4-快速排序（Quick-Sort）"><a href="#4-快速排序（Quick-Sort）" class="headerlink" title="4. 快速排序（Quick Sort）"></a>4. 快速排序（Quick Sort）</h3><p>快速排序是一种高效的分治排序算法。它选择一个元素作为“pivot”（基准），将数组分成两部分，然后递归地对这两部分进行排序。快速排序的平均时间复杂度为O(n*log(n))，但在最坏情况下可能达到O(n^2)。</p><h3 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h3><p>归并排序也是一种分治排序算法，它将数组逐步分成较小的子数组，然后合并这些子数组以获取最终排序结果。归并排序的时间复杂度为O(n*log(n))，具有稳定性。</p><h3 id="6-堆排序（Heap-Sort）"><a href="#6-堆排序（Heap-Sort）" class="headerlink" title="6. 堆排序（Heap Sort）"></a>6. 堆排序（Heap Sort）</h3><p>堆排序使用堆数据结构进行排序。它将数组看作二叉树，构建一个最大堆（或最小堆），然后逐个从堆中取出元素，得到有序序列。堆排序的时间复杂度为O(n*log(n))，不稳定。</p><h3 id="7-计数排序（Counting-Sort）"><a href="#7-计数排序（Counting-Sort）" class="headerlink" title="7. 计数排序（Counting Sort）"></a>7. 计数排序（Counting Sort）</h3><p>计数排序是一种非比较排序算法，适用于整数数据范围较小的情况。它通过统计每个元素出现的次数来进行排序，然后根据计数重新构建有序数组。时间复杂度为O(n+k)，其中k是整数范围。</p><h3 id="8-桶排序（Bucket-Sort）"><a href="#8-桶排序（Bucket-Sort）" class="headerlink" title="8. 桶排序（Bucket Sort）"></a>8. 桶排序（Bucket Sort）</h3><p>桶排序也是一种非比较排序算法，它将数据分为若干个桶，然后对每个桶内的数据进行排序，最后合并桶。桶排序适用于数据分布均匀的情况，平均时间复杂度为O(n+k)，其中k是桶的数量。</p><h3 id="9-基数排序（Radix-Sort）"><a href="#9-基数排序（Radix-Sort）" class="headerlink" title="9. 基数排序（Radix Sort）"></a>9. 基数排序（Radix Sort）</h3><p>基数排序是一种非比较排序算法，适用于整数或字符串排序。它按照元素的位数从低位到高位依次排序，每次排序使用稳定的排序算法。时间复杂度为O(d*(n+k))，其中d是最大位数，k是基数。</p><h3 id="10-希尔排序（Shell-Sort）"><a href="#10-希尔排序（Shell-Sort）" class="headerlink" title="10. 希尔排序（Shell Sort）"></a>10. 希尔排序（Shell Sort）</h3><p>希尔排序是一种改进的插入排序算法，它将数组分为若干个子序列，分别进行插入排序，然后逐渐减小子序列的间隔，最终完成排序。希尔排序的时间复杂度取决于间隔序列的选择，平均时间复杂度介于O(n*log(n))和O(n^2)之间。</p><p>每种排序算法都有其独特的优势和限制，选择合适的排序算法应根据数据集的规模、数据分布和性能需求来决定。了解这些排序算法的工作原理和特点可以帮助我们在实际应用中做出明智的选择，以满足不同排序任务的需求。无论是对小型数据集进行快速排序还是对大型数据集进行稳定排序，这十大排序算法都为我们提供了多种选择。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当我们面临对数据进行排序的任务时，计算机科学家们开发了多种排序算法来满足不同的需求。这些排序算法各具特点，适用于不同规模和类型的数据集。在本文中，我们将介绍十大常见的排序算法，并讨论它们的工作原理、时间复杂度以及适用场景。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>python列表删除元素(全)</title>
    <link href="http://example.com/2022/09/29/python%E5%88%97%E8%A1%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-%E5%85%A8/"/>
    <id>http://example.com/2022/09/29/python%E5%88%97%E8%A1%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-%E5%85%A8/</id>
    <published>2022-09-29T09:54:45.000Z</published>
    <updated>2023-09-10T02:28:44.475Z</updated>
    
    <content type="html"><![CDATA[<p><strong>python列表删除元素</strong></p><span id="more"></span><h3 id="列表直接删除元素"><a href="#列表直接删除元素" class="headerlink" title="列表直接删除元素"></a>列表直接删除元素</h3><p><strong>remove: 删除单个元素，删除首个符合条件的元素，按值删除</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">str</span>.remove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)  <span class="comment"># [1, 2, 4, 3, 5, 6, 2]</span></span><br></pre></td></tr></table></figure><p><strong>pop: 删除单个或多个元素，按位删除(根据索引删除), 删除时会返回被删除的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_pop= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">str_pop.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(str_pop)  <span class="comment"># [1, 2, 3, 3, 5, 6, 2]</span></span><br></pre></td></tr></table></figure><p><strong>del: 根据索引删除</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_del= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">del</span> str_del[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(str_del)  <span class="comment"># [1, 3, 4, 3, 5, 6, 2]</span></span><br></pre></td></tr></table></figure><br/><h2 id="列表遍历过程中删除元素-会造成不可预知错误-可使用下面几种方法删除"><a href="#列表遍历过程中删除元素-会造成不可预知错误-可使用下面几种方法删除" class="headerlink" title="列表遍历过程中删除元素, 会造成不可预知错误, 可使用下面几种方法删除"></a>列表遍历过程中删除元素, 会造成不可预知错误, 可使用下面几种方法删除</h2><p><strong>方法一: 列表推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 &lt;4</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">new_list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> list1 <span class="keyword">if</span> i &gt; <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(new_list1)</span><br></pre></td></tr></table></figure><p><strong>方法二: filter + lambda</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 &lt;4</span></span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">new_list2 = <span class="built_in">filter</span>(<span class="keyword">lambda</span> i: i &gt; <span class="number">4</span>, list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_list2))</span><br></pre></td></tr></table></figure><p><strong>方法三: 倒序遍历</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 &gt;4</span></span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list3)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> list3[i] &gt; <span class="number">4</span>:</span><br><span class="line">        list3.remove(list3[i])</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure><p><strong>方法四:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 &gt;4</span></span><br><span class="line">list4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">new_list4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list4:</span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">4</span>:</span><br><span class="line">        new_list4.append(i)</span><br><span class="line"><span class="built_in">print</span>(new_list4)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;python列表删除元素&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>go语言数组相关</title>
    <link href="http://example.com/2022/08/11/go%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2022/08/11/go%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3/</id>
    <published>2022-08-11T03:53:52.000Z</published>
    <updated>2023-09-10T02:28:44.474Z</updated>
    
    <content type="html"><![CDATA[<p><strong>go语言数组相关换算</strong><br>目前已有：交集，差集，去重<br>持续更新</p><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组相关换算</span></span><br><span class="line"><span class="comment">// 交集，差集，去重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">98</span>, <span class="number">298</span>, <span class="number">588</span>, <span class="number">1598</span>, <span class="number">3698</span>, <span class="number">5000</span>&#125;</span><br><span class="line">    b := []<span class="keyword">int</span>&#123;<span class="number">298</span>, <span class="number">588</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DiffArray 求两个切片的差集, 在a里面不在b里面</span></span><br><span class="line">    diff_array := DiffArray(a, b)</span><br><span class="line">    fmt.Println(diff_array)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交集</span></span><br><span class="line">    intersect_array := IntersectArray(a, b)</span><br><span class="line">    fmt.Println(intersect_array)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去重</span></span><br><span class="line">    arr := []<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">    remove_repeated := RemoveRepeatedElement(arr)</span><br><span class="line">    remove_repeatedq := arrayUnique(arr)</span><br><span class="line">    fmt.Println(remove_repeated)</span><br><span class="line">    fmt.Println(remove_repeatedq)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DiffArray 求两个切片的差集</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DiffArray</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> diffArray []<span class="keyword">int</span></span><br><span class="line">    temp := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> b &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := temp[val]; !ok &#123;</span><br><span class="line">            temp[val] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := temp[val]; !ok &#123;</span><br><span class="line">            diffArray = <span class="built_in">append</span>(diffArray, val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diffArray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntersectArray 求两个切片的交集</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntersectArray</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> inter []<span class="keyword">int</span></span><br><span class="line">    mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := mp[s]; !ok &#123;</span><br><span class="line">            mp[s] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> b &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := mp[s]; ok &#123;</span><br><span class="line">            inter = <span class="built_in">append</span>(inter, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切片去重实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrayUnique</span><span class="params">(arr []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(arr))</span><br><span class="line">    temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := temp[arr[i]]; ok != <span class="literal">true</span> &#123;</span><br><span class="line">            temp[arr[i]] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">            result = <span class="built_in">append</span>(result, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoveRepeatedElement 切片去重实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RemoveRepeatedElement</span><span class="params">(arr []<span class="keyword">string</span>)</span> <span class="params">(newArr []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    newArr = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        repeat := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(arr); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] == arr[j] &#123;</span><br><span class="line">                repeat = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !repeat &#123;</span><br><span class="line">            newArr = <span class="built_in">append</span>(newArr, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;go语言数组相关换算&lt;/strong&gt;&lt;br&gt;目前已有：交集，差集，去重&lt;br&gt;持续更新&lt;/p&gt;</summary>
    
    
    
    <category term="golang开发" scheme="http://example.com/categories/golang%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>go语言除法四舍五入</title>
    <link href="http://example.com/2022/05/18/go%E8%AF%AD%E8%A8%80%E9%99%A4%E6%B3%95%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/"/>
    <id>http://example.com/2022/05/18/go%E8%AF%AD%E8%A8%80%E9%99%A4%E6%B3%95%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/</id>
    <published>2022-05-18T08:03:13.000Z</published>
    <updated>2023-09-10T02:28:44.475Z</updated>
    
    <content type="html"><![CDATA[<p>加0.5后向下取整</p><span id="more"></span><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">round</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int64</span>(math.Floor(x + <span class="number">0.5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;加0.5后向下取整&lt;/p&gt;</summary>
    
    
    
    <category term="后端开发" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>python时间格式化/时间格式转换</title>
    <link href="http://example.com/2022/03/09/python%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2022/03/09/python%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-03-09T07:29:40.000Z</published>
    <updated>2023-09-10T02:28:44.476Z</updated>
    
    <content type="html"><![CDATA[<p>python时间格式化/时间格式转换</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;获取某个时间&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> relativedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上月(eg: 202201)</span></span><br><span class="line">last_month = (datetime.datetime.now() + relativedelta.relativedelta(months=-<span class="number">1</span>)).strftime(<span class="string">&quot;%Y%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当月(eg: 202202)</span></span><br><span class="line">issue_no = time.strftime(<span class="string">&quot;%Y%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下月(eg: 202203)</span></span><br><span class="line">nextmonth = (datetime.date.today() + relativedelta.relativedelta(months=<span class="number">1</span>)).strftime(<span class="string">&quot;%Y%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年月日（eg:2022-03-01）</span></span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年月日时分秒（eg:2022-03-01 00:00:00）</span></span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当月第一天，下月第一天</span></span><br><span class="line">month_first_day = datetime.date(year=today.year, month=today.month, day=<span class="number">1</span>)</span><br><span class="line">next_clear_day = month_first_day + relativedelta(months=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3天前的日期 </span></span><br><span class="line">threeDayAgo = (datetime.datetime.now() - datetime.timedelta(days = <span class="number">3</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 31天后的日期</span></span><br><span class="line">starttime = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">endtime = (datetime.datetime.now() + datetime.timedelta(days=<span class="number">31</span>)).strftime(<span class="string">&#x27;%Y-%m-%d 00:00:00&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;时间转换&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转字符串格式时间</span></span><br><span class="line">timestamp = time.time()     <span class="comment"># 当前时间戳</span></span><br><span class="line">strtime = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(timestamp))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串格式时间转时间戳</span></span><br><span class="line">now_str = <span class="string">&quot;2022-03-09 00:00:00&quot;</span></span><br><span class="line">now_time = time.strptime(now_str,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">timestamp = time.mktime(now_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间30分钟后时间日期，35分钟后时间日期</span></span><br><span class="line">start_time1 = (datetime.datetime.now()+datetime.timedelta(minutes=<span class="number">30</span>)).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">end_time1 = (datetime.datetime.now()+datetime.timedelta(minutes=<span class="number">30</span>)+datetime.timedelta(minutes=<span class="number">5</span>)).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(start_time1)</span><br><span class="line"><span class="built_in">print</span>(end_time1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下周一零点</span></span><br><span class="line">today = datetime.datetime.today()</span><br><span class="line">wd = today.weekday()    <span class="comment"># 周几，从0开始算</span></span><br><span class="line">next_monday = datetime.datetime(today.year, today.month, today.day) + datetime.timedelta(days=<span class="number">7</span>-wd)</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(wd)</span><br><span class="line"><span class="built_in">print</span>(next_monday)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 24小时之后的时间</span></span><br><span class="line">expire = today + datetime.timedelta(hours=<span class="number">24</span>)</span><br><span class="line"><span class="built_in">print</span>(expire)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python日期格式化</span></span><br><span class="line">week = time.strftime(<span class="string">&quot;%A&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><h4 id="附：python日期格式化符号"><a href="#附：python日期格式化符号" class="headerlink" title="附：python日期格式化符号"></a>附：python日期格式化符号</h4><p>%y 两位数的年份表示（00-99）<br>%Y 四位数的年份表示（000-9999）<br>%m 月份（01-12）<br>%d 月内中的一天（0-31）<br>%H 24小时制小时数（0-23）<br>%I 12小时制小时数（01-12）<br>%M 分钟数（00=59）<br>%S 秒（00-59）<br>%a 本地简化星期名称<br>%A 本地完整星期名称<br>%b 本地简化的月份名称<br>%B 本地完整的月份名称<br>%c 本地相应的日期表示和时间表示<br>%j 年内的一天（001-366）<br>%p 本地A.M.或P.M.的等价符<br>%U 一年中的星期数（00-53）星期天为星期的开始<br>%w 星期（0-6），星期天为星期的开始<br>%W 一年中的星期数（00-53）星期一为星期的开始<br>%x 本地相应的日期表示<br>%X 本地相应的时间表示<br>%Z 当前时区的名称<br>%% %号本身</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;python时间格式化/时间格式转换&lt;/p&gt;</summary>
    
    
    
    <category term="后端开发" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>工作中常用到的github命令</title>
    <link href="http://example.com/2022/03/02/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84github%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/03/02/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84github%E5%91%BD%E4%BB%A4/</id>
    <published>2022-03-02T08:05:06.000Z</published>
    <updated>2022-03-06T02:31:20.306Z</updated>
    
    <content type="html"><![CDATA[<p>工作中常用到的github命令</p><span id="more"></span><h2 id="从master新建分支"><a href="#从master新建分支" class="headerlink" title="从master新建分支"></a>从master新建分支</h2><blockquote><p>1.git checkout master                       切换到master分支<br>2.git pull                                  更新到最新代码<br>3.git checkout -b dev                       创建新分支并切换到该分支<br>4.git push origin dev                       推送新分支到远程仓库<br>5.git branch –set-upstream-to=origin/dev   关联远程仓库<br>6.git pull                                  尝试拉取验证</p></blockquote><h2 id="dev分支合并代码到master"><a href="#dev分支合并代码到master" class="headerlink" title="dev分支合并代码到master"></a>dev分支合并代码到master</h2><blockquote><p>1.git checkout maste;<br>2.git pull origin master;<br>3.git merge –squash dev;<br>4.git status;<br>5.git stash;  (暂存起来，查看解决的冲突有没有问题)<br>6.git stash pop;<br>7.git diff;   (确认没问题，直接添加)<br>8.git add .;<br>9.git commit -m “feat: xxxx”;<br>10.git log;<br>11.git push origin master;</p></blockquote><h2 id="git-rebase（dev–自己，-master–想要比对的）"><a href="#git-rebase（dev–自己，-master–想要比对的）" class="headerlink" title="git rebase（dev–自己， master–想要比对的）"></a>git rebase（dev–自己， master–想要比对的）</h2><blockquote><p>1.dev和master分支先更新到最新，然后切换到dev分支；<br>2.git log;<br>3.git rebase master;<br>4.git status;<br>5.解决冲突;<br>6.git add [冲突文件]；<br>7.git rebase –continue;<br>8.:wq（保存）<br>9.继续git status;        (重复知道所有冲突解决完)<br>10.git rebase -i [commit名称（dev分支第一次commit之前的名称，非自己的）];<br>11.将前面的pick改为f（除了第一次commit的);</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;工作中常用到的github命令&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>百度搜索爬取图片</title>
    <link href="http://example.com/2022/01/12/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/"/>
    <id>http://example.com/2022/01/12/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/</id>
    <published>2022-01-12T11:11:33.000Z</published>
    <updated>2022-03-06T02:31:20.306Z</updated>
    
    <content type="html"><![CDATA[<p>根据百度搜索内容爬取图片</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;根据搜索词下载百度图片&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span>(<span class="params">keyword,page,n</span>):</span></span><br><span class="line">    page=page*n</span><br><span class="line">    keyword=urllib.parse.quote(keyword, safe=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    url_begin= <span class="string">&quot;http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=&quot;</span></span><br><span class="line">    url = url_begin+ keyword + <span class="string">&quot;&amp;pn=&quot;</span> +<span class="built_in">str</span>(page) + <span class="string">&quot;&amp;gsm=&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(page))+<span class="string">&quot;&amp;ct=&amp;ic=0&amp;lm=-1&amp;width=0&amp;height=0&quot;</span></span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_onepage_urls</span>(<span class="params">onepageurl</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(onepageurl).text</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        pic_urls = []</span><br><span class="line">        <span class="keyword">return</span> pic_urls</span><br><span class="line">    pic_urls = re.findall(<span class="string">&#x27;&quot;objURL&quot;:&quot;(.*?)&quot;,&#x27;</span>, html, re.S)</span><br><span class="line">    <span class="keyword">return</span> pic_urls</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down_pic</span>(<span class="params">pic_urls, keyword</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;给出图片链接列表, 下载所有图片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, pic_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(pic_urls):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pic = requests.get(pic_url, timeout=<span class="number">15</span>)</span><br><span class="line">            string =<span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;./&#x27;</span> + keyword):</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./&#x27;</span> + keyword + <span class="string">&#x27;/&#x27;</span> + string, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(pic.content)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;成功下载第%s张图片: %s&#x27;</span> % (<span class="built_in">str</span>(i + <span class="number">1</span>), <span class="built_in">str</span>(pic_url)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                os.mkdir(<span class="string">&#x27;./&#x27;</span> + keyword)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./&#x27;</span> + keyword + <span class="string">&#x27;/&#x27;</span> + string, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(pic.content)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;成功下载第%s张图片: %s&#x27;</span> % (<span class="built_in">str</span>(i + <span class="number">1</span>), <span class="built_in">str</span>(pic_url)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;下载第%s张图片时失败: %s&#x27;</span> % (<span class="built_in">str</span>(i + <span class="number">1</span>), <span class="built_in">str</span>(pic_url)))</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    keyword = <span class="string">&#x27;天海翼&#x27;</span>  <span class="comment"># 关键词, 改为你想输入的词即可, 相当于在百度图片里搜索一样</span></span><br><span class="line">    page_begin=<span class="number">0</span></span><br><span class="line">    page_number=<span class="number">30</span></span><br><span class="line">    image_number=<span class="number">3</span></span><br><span class="line">    all_pic_urls = []</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> page_begin&gt;image_number:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d次请求数据&quot;</span>,[page_begin])</span><br><span class="line">        url=getPage(keyword,page_begin,page_number)</span><br><span class="line">        onepage_urls= get_onepage_urls(url)</span><br><span class="line">        page_begin += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">        all_pic_urls.extend(onepage_urls)</span><br><span class="line"> </span><br><span class="line">    down_pic(<span class="built_in">list</span>(<span class="built_in">set</span>(all_pic_urls)), keyword)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据百度搜索内容爬取图片&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>mysql批量插入数据 excutemany</title>
    <link href="http://example.com/2022/01/04/mysql%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE-excutemany/"/>
    <id>http://example.com/2022/01/04/mysql%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE-excutemany/</id>
    <published>2022-01-04T03:25:31.000Z</published>
    <updated>2023-09-16T09:25:37.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>问题：<br>往数据库批量插入10条数据的时候，在for循环里面使用excute插入，接口请求耗时&gt;1s，严重影响效率；</p></blockquote><span id="more"></span><blockquote><p>遂考虑使用excutemany批量插入，接口请求耗时400ms</p></blockquote><blockquote><p>逐条插入：cursor.excute()<br>批量插入：cursor.excutemany()<br>使用：executemany(templet, args)<br>templet：sql模板字符串，例如：insert into table(id,name) values(%s,%s)<br>args: 模板字符串中的参数，是一个list或者tuple, eg: [(1,”a”),(2,”b”)] 或者 ((1,”a”),(2,”b”))</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例-节选</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">draw_list = [...]   <span class="comment"># len(draw_list) = 10</span></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27; insert into table(remix_uid, stage, tp, price, draw_result) values (%s,%s,%s,%s,%s)&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">cursor = db.cursor()</span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> draw_list:</span><br><span class="line">    cursor.excute(sql, [args])</span><br><span class="line">end_time = time.time() - start_time</span><br><span class="line"><span class="built_in">print</span>(end_time)  <span class="comment"># &gt;1s</span></span><br></pre></td></tr></table></figure><p>修改为以下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">data = ((item[<span class="string">&#x27;&#x27;</span>], item[<span class="string">&#x27;&#x27;</span>], ...) <span class="keyword">for</span> item <span class="keyword">in</span> draw_list)</span><br><span class="line">cursor.executemany(sql, data)</span><br><span class="line"></span><br><span class="line">end_time = time.time() - start_time</span><br><span class="line"><span class="built_in">print</span>(end_time)  <span class="comment"># 400ms</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;问题：&lt;br&gt;往数据库批量插入10条数据的时候，在for循环里面使用excute插入，接口请求耗时&amp;gt;1s，严重影响效率；&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="后端开发" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
    <category term="Databse" scheme="http://example.com/tags/Databse/"/>
    
  </entry>
  
  <entry>
    <title>python时间时间换算 精确到毫秒</title>
    <link href="http://example.com/2022/01/04/python%E6%97%B6%E9%97%B4%E6%97%B6%E9%97%B4%E6%8D%A2%E7%AE%97-%E7%B2%BE%E7%A1%AE%E5%88%B0%E6%AF%AB%E7%A7%92/"/>
    <id>http://example.com/2022/01/04/python%E6%97%B6%E9%97%B4%E6%97%B6%E9%97%B4%E6%8D%A2%E7%AE%97-%E7%B2%BE%E7%A1%AE%E5%88%B0%E6%AF%AB%E7%A7%92/</id>
    <published>2022-01-04T03:23:41.000Z</published>
    <updated>2022-01-09T05:13:57.296Z</updated>
    
    <content type="html"><![CDATA[<p><strong>python时间时间换算 精确到毫秒</strong></p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_stamp1</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    时间戳  精确到毫秒，17位</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ct = time.time()</span><br><span class="line">    local_time = time.localtime(ct)</span><br><span class="line">    data_head = time.strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>, local_time)</span><br><span class="line">    data_secs = (ct - <span class="built_in">int</span>(ct)) * <span class="number">1000</span></span><br><span class="line">    time_stamp = <span class="string">&quot;%s%03d&quot;</span> % (data_head, data_secs)      <span class="comment"># 17位时间戳</span></span><br><span class="line">    <span class="keyword">return</span> time_stamp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_stamp2</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    时间戳  精确到毫秒，20位</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = datetime.datetime.now().strftime(<span class="string">&#x27;%Y%m%d%H%M%S%f&#x27;</span>)       <span class="comment"># 20位时间戳</span></span><br><span class="line">    random_digit = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(random.choice(<span class="built_in">range</span>(<span class="number">8</span>))) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>))      <span class="comment"># 8位随机数</span></span><br><span class="line">    <span class="keyword">return</span> (time+random_digit)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;python时间时间换算 精确到毫秒&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端开发" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Go语言生成随机数</title>
    <link href="http://example.com/2022/01/04/Go%E8%AF%AD%E8%A8%80%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://example.com/2022/01/04/Go%E8%AF%AD%E8%A8%80%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2022-01-04T03:22:24.000Z</published>
    <updated>2023-09-10T02:28:44.474Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用go语言生成随机数</strong></p><span id="more"></span><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 由于go语言未提供2个区间参数，只一个参数的情况下先随机0到(m-n)，再用加 n 的方式解决</span></span><br><span class="line"><span class="comment">// 例：[5, 10], 先生成[0,5], 再加5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// go取随机数需要指定一个随机种子</span></span><br><span class="line"><span class="comment">// 种子一般使用当前的系统时间，这是完全随机的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line"><span class="comment">// res := getRandomWithAll(5, 10)</span></span><br><span class="line"><span class="comment">// res := getRandomWithMin(5, 10)</span></span><br><span class="line"><span class="comment">// res := getRandomWithMax(5, 10)</span></span><br><span class="line">res := getRandomWithNo(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含上下限 [min, max]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithAll</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int64</span>(rand.Intn(max-min+<span class="number">1</span>) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含上限 [min, max)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithMin</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int64</span>(rand.Intn(max-min) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含下限 (min, max]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithMax</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">int64</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">Restart:</span><br><span class="line">res = <span class="keyword">int64</span>(rand.Intn(max-min+<span class="number">1</span>) + min)</span><br><span class="line"><span class="keyword">if</span> res == <span class="keyword">int64</span>(min) &#123;</span><br><span class="line"><span class="keyword">goto</span> Restart</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都不包含 (min, max)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithNo</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">int64</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">Restart:</span><br><span class="line">res = <span class="keyword">int64</span>(rand.Intn(max-min) + min)</span><br><span class="line"><span class="keyword">if</span> res == <span class="keyword">int64</span>(min) &#123;</span><br><span class="line"><span class="keyword">goto</span> Restart</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;使用go语言生成随机数&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端开发" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
</feed>
