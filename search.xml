<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GO语言时间转换</title>
    <url>/2022/01/04/GO%E8%AF%AD%E8%A8%80%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p><strong>使用go语言进行不同时间类型之间的转换</strong></p>
<span id="more"></span>

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 2021-07-23 15:36:00.346234 +0800 CST m=+0.000174001</span></span><br><span class="line">	now := time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 格式化 2021-07-23 15:36:00</span></span><br><span class="line">	time1 := time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// unix时间戳格式化</span></span><br><span class="line">	time2 := now.Unix()                                        <span class="comment">// 1627025820</span></span><br><span class="line">	time3 := time.Unix(time2, <span class="number">0</span>).Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>) <span class="comment">// 2021-07-23 15:37:00</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 当前时间加/减一分钟</span></span><br><span class="line">	time4 := now.Add(time.Minute * time.Duration(<span class="number">1</span>))</span><br><span class="line">	time5 := now.Add(-(time.Minute * time.Duration(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 时间比较大小，先转为以下格式</span></span><br><span class="line">	<span class="comment">// 1970-01-01 08:00:00 +0800 CST</span></span><br><span class="line"></span><br><span class="line">	time6, _ := time.ParseInLocation(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, time3, time.Local)</span><br><span class="line">	<span class="keyword">if</span> now.Before(time6) &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> now.After(time6) &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 周一</span></span><br><span class="line">	on_monday, next_monday := getBgnEnd(now)</span><br><span class="line">	fmt.Println(on_monday, next_monday)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 下月1号零点</span></span><br><span class="line">	next_month_0 := GetNextMonthStartTs()</span><br><span class="line">	fmt.Println(next_month_0)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 本月1号零点</span></span><br><span class="line">	on_month_0 := GetFirstDateOfMonth(now)</span><br><span class="line">	fmt.Println(on_month_0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回周一的字符串和下周一零点的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBgnEnd</span><span class="params">(curT time.Time)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	curW := <span class="keyword">int</span>(curT.Weekday()) - <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> curW == <span class="number">-1</span> &#123; <span class="comment">//星期天当成7</span></span><br><span class="line">		curW = <span class="number">6</span></span><br><span class="line">	&#125;</span><br><span class="line">	curM := curT.AddDate(<span class="number">0</span>, <span class="number">0</span>, -curW)</span><br><span class="line">	tmpMondayTime := time.Date(curM.Year(), curM.Month(), curM.Day(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, time.Local).Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)</span><br><span class="line">	tmpMondayStr := curM.Format(<span class="string">&quot;20060102&quot;</span>)</span><br><span class="line">	tmpT, _ := time.ParseInLocation(<span class="string">&quot;20060102&quot;</span>, tmpMondayStr, time.Local)</span><br><span class="line">	tmpDeadLineTime := tmpT.AddDate(<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>).Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> tmpMondayTime, tmpDeadLineTime</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回周一的字符串和下周一零点的时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBgnEnd1</span><span class="params">(curT time.Time)</span> <span class="params">(<span class="keyword">string</span>, time.Time)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 一天滚一次</span></span><br><span class="line">	tmpDayStr := curT.Format(<span class="string">&quot;20060102&quot;</span>)</span><br><span class="line">	tmpT, _ := time.ParseInLocation(<span class="string">&quot;20060102&quot;</span>, tmpDayStr, time.Local)</span><br><span class="line">	tmpDeadLineTime := tmpT.AddDate(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">return</span> tmpDayStr, tmpDeadLineTime</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下月1号零点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetNextMonthStartTs</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">	now := time.Now()</span><br><span class="line">	nowYeah, nowMonth, _ := now.Date()</span><br><span class="line">	loc := now.Location()</span><br><span class="line">	<span class="keyword">return</span> time.Date(nowYeah, nowMonth, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, loc).AddDate(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本月1号零点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFirstDateOfMonth</span><span class="params">(d time.Time)</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">	d = d.AddDate(<span class="number">0</span>, <span class="number">0</span>, -d.Day()+<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">return</span> GetZeroTime(d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取某一天的0点时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetZeroTime</span><span class="params">(d time.Time)</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> time.Date(d.Year(), d.Month(), d.Day(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, d.Location())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言数组相关</title>
    <url>/2022/08/11/go%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p><strong>go语言数组相关换算</strong><br>目前已有：交集，差集，去重<br>持续更新</p>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组相关换算</span></span><br><span class="line"><span class="comment">// 交集，差集，去重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">98</span>, <span class="number">298</span>, <span class="number">588</span>, <span class="number">1598</span>, <span class="number">3698</span>, <span class="number">5000</span>&#125;</span><br><span class="line">    b := []<span class="keyword">int</span>&#123;<span class="number">298</span>, <span class="number">588</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DiffArray 求两个切片的差集, 在a里面不在b里面</span></span><br><span class="line">    diff_array := DiffArray(a, b)</span><br><span class="line">    fmt.Println(diff_array)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交集</span></span><br><span class="line">    intersect_array := IntersectArray(a, b)</span><br><span class="line">    fmt.Println(intersect_array)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去重</span></span><br><span class="line">    arr := []<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">    remove_repeated := RemoveRepeatedElement(arr)</span><br><span class="line">    remove_repeatedq := arrayUnique(arr)</span><br><span class="line">    fmt.Println(remove_repeated)</span><br><span class="line">    fmt.Println(remove_repeatedq)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DiffArray 求两个切片的差集</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DiffArray</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> diffArray []<span class="keyword">int</span></span><br><span class="line">    temp := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> b &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := temp[val]; !ok &#123;</span><br><span class="line">            temp[val] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := temp[val]; !ok &#123;</span><br><span class="line">            diffArray = <span class="built_in">append</span>(diffArray, val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diffArray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntersectArray 求两个切片的交集</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntersectArray</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> inter []<span class="keyword">int</span></span><br><span class="line">    mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := mp[s]; !ok &#123;</span><br><span class="line">            mp[s] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> b &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := mp[s]; ok &#123;</span><br><span class="line">            inter = <span class="built_in">append</span>(inter, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切片去重实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrayUnique</span><span class="params">(arr []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(arr))</span><br><span class="line">    temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := temp[arr[i]]; ok != <span class="literal">true</span> &#123;</span><br><span class="line">            temp[arr[i]] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">            result = <span class="built_in">append</span>(result, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoveRepeatedElement 切片去重实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RemoveRepeatedElement</span><span class="params">(arr []<span class="keyword">string</span>)</span> <span class="params">(newArr []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    newArr = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        repeat := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(arr); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] == arr[j] &#123;</span><br><span class="line">                repeat = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !repeat &#123;</span><br><span class="line">            newArr = <span class="built_in">append</span>(newArr, arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang开发</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言生成随机数</title>
    <url>/2022/01/04/Go%E8%AF%AD%E8%A8%80%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<p><strong>使用go语言生成随机数</strong></p>
<span id="more"></span>

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 由于go语言未提供2个区间参数，只一个参数的情况下先随机0到(m-n)，再用加 n 的方式解决</span></span><br><span class="line">	<span class="comment">// 例：[5, 10], 先生成[0,5], 再加5</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// go取随机数需要指定一个随机种子</span></span><br><span class="line">	<span class="comment">// 种子一般使用当前的系统时间，这是完全随机的。</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">		<span class="comment">// res := getRandomWithAll(5, 10)</span></span><br><span class="line">		<span class="comment">// res := getRandomWithMin(5, 10)</span></span><br><span class="line">		<span class="comment">// res := getRandomWithMax(5, 10)</span></span><br><span class="line">		res := getRandomWithNo(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">		fmt.Println(res)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含上下限 [min, max]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithAll</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">int64</span>(rand.Intn(max-min+<span class="number">1</span>) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含上限 [min, max)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithMin</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">int64</span>(rand.Intn(max-min) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含下限 (min, max]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithMax</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> res <span class="keyword">int64</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">Restart:</span><br><span class="line">	res = <span class="keyword">int64</span>(rand.Intn(max-min+<span class="number">1</span>) + min)</span><br><span class="line">	<span class="keyword">if</span> res == <span class="keyword">int64</span>(min) &#123;</span><br><span class="line">		<span class="keyword">goto</span> Restart</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都不包含 (min, max)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomWithNo</span><span class="params">(min, max <span class="keyword">int</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> res <span class="keyword">int64</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">Restart:</span><br><span class="line">	res = <span class="keyword">int64</span>(rand.Intn(max-min) + min)</span><br><span class="line">	<span class="keyword">if</span> res == <span class="keyword">int64</span>(min) &#123;</span><br><span class="line">		<span class="keyword">goto</span> Restart</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言除法四舍五入</title>
    <url>/2022/05/18/go%E8%AF%AD%E8%A8%80%E9%99%A4%E6%B3%95%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/</url>
    <content><![CDATA[<p>加0.5后向下取整</p>
<span id="more"></span>

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">round</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">int64</span>(math.Floor(x + <span class="number">0.5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python列表删除元素(全)</title>
    <url>/2022/09/29/python%E5%88%97%E8%A1%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-%E5%85%A8/</url>
    <content><![CDATA[<p><strong>python列表删除元素</strong></p>
<span id="more"></span>

<h3 id="列表直接删除元素"><a href="#列表直接删除元素" class="headerlink" title="列表直接删除元素"></a>列表直接删除元素</h3><p><strong>remove: 删除单个元素，删除首个符合条件的元素，按值删除</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">str</span>.remove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)  <span class="comment"># [1, 2, 4, 3, 5, 6, 2]</span></span><br></pre></td></tr></table></figure>

<p><strong>pop: 删除单个或多个元素，按位删除(根据索引删除), 删除时会返回被删除的元素</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_pop= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">str_pop.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(str_pop)  <span class="comment"># [1, 2, 3, 3, 5, 6, 2]</span></span><br></pre></td></tr></table></figure>

<p><strong>del: 根据索引删除</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_del= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">del</span> str_del[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(str_del)  <span class="comment"># [1, 3, 4, 3, 5, 6, 2]</span></span><br></pre></td></tr></table></figure>

<br/>

<h2 id="列表遍历过程中删除元素-会造成不可预知错误-可使用下面几种方法删除"><a href="#列表遍历过程中删除元素-会造成不可预知错误-可使用下面几种方法删除" class="headerlink" title="列表遍历过程中删除元素, 会造成不可预知错误, 可使用下面几种方法删除"></a>列表遍历过程中删除元素, 会造成不可预知错误, 可使用下面几种方法删除</h2><p><strong>方法一: 列表推导式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 &lt;4</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">new_list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> list1 <span class="keyword">if</span> i &gt; <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(new_list1)</span><br></pre></td></tr></table></figure>

<p><strong>方法二: filter + lambda</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 &lt;4</span></span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">new_list2 = <span class="built_in">filter</span>(<span class="keyword">lambda</span> i: i &gt; <span class="number">4</span>, list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_list2))</span><br></pre></td></tr></table></figure>

<p><strong>方法三: 倒序遍历</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 &gt;4</span></span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list3)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> list3[i] &gt; <span class="number">4</span>:</span><br><span class="line">        list3.remove(list3[i])</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure>

<p><strong>方法四:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 &gt;4</span></span><br><span class="line">list4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">new_list4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list4:</span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">4</span>:</span><br><span class="line">        new_list4.append(i)</span><br><span class="line"><span class="built_in">print</span>(new_list4)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python时间时间换算 精确到毫秒</title>
    <url>/2022/01/04/python%E6%97%B6%E9%97%B4%E6%97%B6%E9%97%B4%E6%8D%A2%E7%AE%97-%E7%B2%BE%E7%A1%AE%E5%88%B0%E6%AF%AB%E7%A7%92/</url>
    <content><![CDATA[<p><strong>python时间时间换算 精确到毫秒</strong></p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_stamp1</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    时间戳  精确到毫秒，17位</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ct = time.time()</span><br><span class="line">    local_time = time.localtime(ct)</span><br><span class="line">    data_head = time.strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>, local_time)</span><br><span class="line">    data_secs = (ct - <span class="built_in">int</span>(ct)) * <span class="number">1000</span></span><br><span class="line">    time_stamp = <span class="string">&quot;%s%03d&quot;</span> % (data_head, data_secs)      <span class="comment"># 17位时间戳</span></span><br><span class="line">    <span class="keyword">return</span> time_stamp</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_stamp2</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    时间戳  精确到毫秒，20位</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = datetime.datetime.now().strftime(<span class="string">&#x27;%Y%m%d%H%M%S%f&#x27;</span>)       <span class="comment"># 20位时间戳</span></span><br><span class="line">    random_digit = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(random.choice(<span class="built_in">range</span>(<span class="number">8</span>))) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>))      <span class="comment"># 8位随机数</span></span><br><span class="line">    <span class="keyword">return</span> (time+random_digit)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql批量插入数据 excutemany</title>
    <url>/2022/01/04/mysql%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE-excutemany/</url>
    <content><![CDATA[<blockquote>
<p>问题：<br>往数据库批量插入10条数据的时候，在for循环里面使用excute插入，接口请求耗时&gt;1s，严重影响效率；</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>遂考虑使用excutemany批量插入，接口请求耗时400ms</p>
</blockquote>
<blockquote>
<p>逐条插入：cursor.excute()<br>批量插入：cursor.excutemany()<br>使用：executemany(templet, args)<br>templet：sql模板字符串，例如：insert into table(id,name) values(%s,%s)<br>args: 模板字符串中的参数，是一个list或者tuple, eg: [(1,”a”),(2,”b”)] 或者 ((1,”a”),(2,”b”))</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例-节选</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">draw_list = [...]   <span class="comment"># len(draw_list) = 10</span></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27; insert into table(remix_uid, stage, tp, price, draw_result) values (%s,%s,%s,%s,%s)&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">cursor = db.cursor()</span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> draw_list:</span><br><span class="line">    cursor.excute(sql, [args])</span><br><span class="line">end_time = time.time() - start_time</span><br><span class="line"><span class="built_in">print</span>(end_time)  <span class="comment"># &gt;1s</span></span><br></pre></td></tr></table></figure>

<p>修改为以下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">data = ((item[<span class="string">&#x27;&#x27;</span>], item[<span class="string">&#x27;&#x27;</span>], ...) <span class="keyword">for</span> item <span class="keyword">in</span> draw_list)</span><br><span class="line">cursor.executemany(sql, data)</span><br><span class="line"></span><br><span class="line">end_time = time.time() - start_time</span><br><span class="line"><span class="built_in">print</span>(end_time)  <span class="comment"># 400ms</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Mysql</tag>
        <tag>Databse</tag>
      </tags>
  </entry>
  <entry>
    <title>python时间格式化/时间格式转换</title>
    <url>/2022/03/09/python%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>python时间格式化/时间格式转换</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;获取某个时间&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> relativedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上月(eg: 202201)</span></span><br><span class="line">last_month = (datetime.datetime.now() + relativedelta.relativedelta(months=-<span class="number">1</span>)).strftime(<span class="string">&quot;%Y%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当月(eg: 202202)</span></span><br><span class="line">issue_no = time.strftime(<span class="string">&quot;%Y%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下月(eg: 202203)</span></span><br><span class="line">nextmonth = (datetime.date.today() + relativedelta.relativedelta(months=<span class="number">1</span>)).strftime(<span class="string">&quot;%Y%m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年月日（eg:2022-03-01）</span></span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年月日时分秒（eg:2022-03-01 00:00:00）</span></span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当月第一天，下月第一天</span></span><br><span class="line">month_first_day = datetime.date(year=today.year, month=today.month, day=<span class="number">1</span>)</span><br><span class="line">next_clear_day = month_first_day + relativedelta(months=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3天前的日期 </span></span><br><span class="line">threeDayAgo = (datetime.datetime.now() - datetime.timedelta(days = <span class="number">3</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 31天后的日期</span></span><br><span class="line">starttime = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">endtime = (datetime.datetime.now() + datetime.timedelta(days=<span class="number">31</span>)).strftime(<span class="string">&#x27;%Y-%m-%d 00:00:00&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;时间转换&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转字符串格式时间</span></span><br><span class="line">timestamp = time.time()     <span class="comment"># 当前时间戳</span></span><br><span class="line">strtime = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(timestamp))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串格式时间转时间戳</span></span><br><span class="line">now_str = <span class="string">&quot;2022-03-09 00:00:00&quot;</span></span><br><span class="line">now_time = time.strptime(now_str,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">timestamp = time.mktime(now_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间30分钟后时间日期，35分钟后时间日期</span></span><br><span class="line">start_time1 = (datetime.datetime.now()+datetime.timedelta(minutes=<span class="number">30</span>)).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">end_time1 = (datetime.datetime.now()+datetime.timedelta(minutes=<span class="number">30</span>)+datetime.timedelta(minutes=<span class="number">5</span>)).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(start_time1)</span><br><span class="line"><span class="built_in">print</span>(end_time1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下周一零点</span></span><br><span class="line">today = datetime.datetime.today()</span><br><span class="line">wd = today.weekday()    <span class="comment"># 周几，从0开始算</span></span><br><span class="line">next_monday = datetime.datetime(today.year, today.month, today.day) + datetime.timedelta(days=<span class="number">7</span>-wd)</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(wd)</span><br><span class="line"><span class="built_in">print</span>(next_monday)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 24小时之后的时间</span></span><br><span class="line">expire = today + datetime.timedelta(hours=<span class="number">24</span>)</span><br><span class="line"><span class="built_in">print</span>(expire)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python日期格式化</span></span><br><span class="line">week = time.strftime(<span class="string">&quot;%A&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="附：python日期格式化符号"><a href="#附：python日期格式化符号" class="headerlink" title="附：python日期格式化符号"></a>附：python日期格式化符号</h4><p>%y 两位数的年份表示（00-99）<br>%Y 四位数的年份表示（000-9999）<br>%m 月份（01-12）<br>%d 月内中的一天（0-31）<br>%H 24小时制小时数（0-23）<br>%I 12小时制小时数（01-12）<br>%M 分钟数（00=59）<br>%S 秒（00-59）<br>%a 本地简化星期名称<br>%A 本地完整星期名称<br>%b 本地简化的月份名称<br>%B 本地完整的月份名称<br>%c 本地相应的日期表示和时间表示<br>%j 年内的一天（001-366）<br>%p 本地A.M.或P.M.的等价符<br>%U 一年中的星期数（00-53）星期天为星期的开始<br>%w 星期（0-6），星期天为星期的开始<br>%W 一年中的星期数（00-53）星期一为星期的开始<br>%x 本地相应的日期表示<br>%X 本地相应的时间表示<br>%Z 当前时区的名称<br>%% %号本身</p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序算法</title>
    <url>/2023/09/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>排序算法是计算机科学中的重要主题，而冒泡排序（Bubble Sort）则是最简单的排序算法之一。尽管它在大型数据集上效率较低，但它的工作原理非常直观，是理解排序算法的绝佳起点。本文将深入探讨冒泡排序的工作原理、时间复杂度以及应用场景。</p>
<span id="more"></span>

<h3 id="冒泡排序的基本思想"><a href="#冒泡排序的基本思想" class="headerlink" title="冒泡排序的基本思想"></a>冒泡排序的基本思想</h3><p>冒泡排序的基本思想非常简单：通过不断比较相邻的两个元素，如果它们的顺序不正确，就交换它们，直到整个数组都排好序。这个过程类似于气泡在液体中上浮的过程，因此得名冒泡排序。</p>
<p>让我们通过一个简单的示例来理解冒泡排序的工作原理。假设有一个整数数组 [5, 2, 9, 3, 4]，我们希望按升序排序它。<br>1.<strong>第一次冒泡</strong>： 从数组的起始位置开始，比较相邻的元素，即 5 和 2。因为 5 &gt; 2，所以它们的顺序不正确，需要交换它们。数组变为 [2, 5, 9, 3, 4]。<br>2.<strong>第二次冒泡</strong>： 接下来，比较 5 和 9。由于它们的顺序正确，不需要交换。数组保持不变。<br>3.<strong>第三次冒泡</strong>： 继续比较 9 和 3，发现它们的顺序不正确，需要交换。数组变为 [2, 5, 3, 9, 4]。<br>4.<strong>第四次冒泡</strong>： 最后，比较 9 和 4，同样发现它们的顺序不正确，需要交换。数组变为 [2, 5, 3, 4, 9]。</p>
<p>这个过程会不断迭代，每次迭代都会将最大的元素“冒泡”到数组的末尾。在一次迭代中，通过多次比较和交换，最大的元素将沿着数组一路上浮到正确的位置。这就是为什么它被称为“冒泡”排序。</p>
<h3 id="冒泡排序的时间复杂度"><a href="#冒泡排序的时间复杂度" class="headerlink" title="冒泡排序的时间复杂度"></a>冒泡排序的时间复杂度</h3><p>虽然冒泡排序的思想简单，但它的时间复杂度并不理想。在最坏情况下，冒泡排序需要进行 n-1 次迭代（n 为数组长度），每次迭代都要比较相邻的元素并进行交换。因此，最坏情况下的时间复杂度为 O(n^2)。这使得冒泡排序在处理大型数据集时效率较低。</p>
<p>值得注意的是，在最佳情况下（数组已经有序），冒泡排序只需要一次迭代，因此时间复杂度为 O(n)。但这种情况很少发生。</p>
<h3 id="冒泡排序的应用场景"><a href="#冒泡排序的应用场景" class="headerlink" title="冒泡排序的应用场景"></a>冒泡排序的应用场景</h3><p>冒泡排序的性能相对较差，通常不推荐在实际应用中使用，特别是对于大型数据集。然而，由于其简单的原理，冒泡排序仍然有一些应用场景：</p>
<p>1.<strong>教育和学习</strong>： 冒泡排序是教授排序算法的良好起点，因为它易于理解和实现。<br>2.<strong>小型数据集</strong>： 在处理小型数据集时，冒泡排序的性能可能比其他复杂的排序算法更好。<br>3.<strong>已接近有序的数据</strong>： 如果数据集已经基本有序，冒泡排序可能比其他算法更有效。<br>4.<strong>排序算法的可视化</strong>： 冒泡排序可以用于排序算法可视化工具，帮助人们更好地理解排序过程。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>以下是冒泡排序的示例代码，分别使用Python、Go、Java和C语言编写。</p>
<p><strong>python代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">bubble_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure>

<p><strong>Go代码</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    bubbleSort(arr)</span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>java代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>C代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubbleSort(arr, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些示例代码展示了如何使用不同编程语言编写冒泡排序算法，它们都具有相同的工作原理，只是语法有所不同。冒泡排序是一种简单但不够高效的排序算法，通常在实际应用中使用更高效的排序算法。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>冒泡排序虽然不是最高效的排序算法，但它的简单性和直观性使它成为学习排序算法的良好起点。在实际应用中，通常会选择更高效的排序算法，特别是对于大型数据集。然而，了解冒泡排序的工作原理有助于理解更复杂的排序算法，并为算法设计提供宝贵的启示。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>排序算法</category>
      </categories>
  </entry>
  <entry>
    <title>工作中常用到的github命令</title>
    <url>/2022/03/02/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84github%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>工作中常用到的github命令</p>
<span id="more"></span>

<h2 id="从master新建分支"><a href="#从master新建分支" class="headerlink" title="从master新建分支"></a>从master新建分支</h2><blockquote>
<p>1.git checkout master                       切换到master分支<br>2.git pull                                  更新到最新代码<br>3.git checkout -b dev                       创建新分支并切换到该分支<br>4.git push origin dev                       推送新分支到远程仓库<br>5.git branch –set-upstream-to=origin/dev   关联远程仓库<br>6.git pull                                  尝试拉取验证</p>
</blockquote>
<h2 id="dev分支合并代码到master"><a href="#dev分支合并代码到master" class="headerlink" title="dev分支合并代码到master"></a>dev分支合并代码到master</h2><blockquote>
<p>1.git checkout maste;<br>2.git pull origin master;<br>3.git merge –squash dev;<br>4.git status;<br>5.git stash;  (暂存起来，查看解决的冲突有没有问题)<br>6.git stash pop;<br>7.git diff;   (确认没问题，直接添加)<br>8.git add .;<br>9.git commit -m “feat: xxxx”;<br>10.git log;<br>11.git push origin master;</p>
</blockquote>
<h2 id="git-rebase（dev–自己，-master–想要比对的）"><a href="#git-rebase（dev–自己，-master–想要比对的）" class="headerlink" title="git rebase（dev–自己， master–想要比对的）"></a>git rebase（dev–自己， master–想要比对的）</h2><blockquote>
<p>1.dev和master分支先更新到最新，然后切换到dev分支；<br>2.git log;<br>3.git rebase master;<br>4.git status;<br>5.解决冲突;<br>6.git add [冲突文件]；<br>7.git rebase –continue;<br>8.:wq（保存）<br>9.继续git status;        (重复知道所有冲突解决完)<br>10.git rebase -i [commit名称（dev分支第一次commit之前的名称，非自己的）];<br>11.将前面的pick改为f（除了第一次commit的);</p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>获取指定范围符合正态分布的随机数Go/Python</title>
    <url>/2022/01/04/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E7%AC%A6%E5%90%88%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0Go-Python/</url>
    <content><![CDATA[<h2 id="Box-Muller算法"><a href="#Box-Muller算法" class="headerlink" title="Box-Muller算法"></a>Box-Muller算法</h2><blockquote>
<p>当x和y是两个独立且服从（0，1）均匀分布的随机变量时，有：</p>
<center>Z1 = cos(2\pi x)*\sqrt{-2ln(1-y))}</center>
<center>Z2 = sin(2\pi x)*\sqrt{-2ln(1-y))}</center>

<p>Z1和Z2独立且服从标准正态分布，当带入均值和方差时:</p>
<center>Z = Z1(Z2)*\sigma +\mu</center>
</blockquote>
<span id="more"></span>
<p>​<br>均值sigma，标准差mu计算:</p>
<blockquote>
<p>根据正态分布的 3sigma法则，5-10范围的均值和方差，和[5,6,7,8,9,10]差不多<br>故：5-10范围的均值：(5+10)/2=7.5<br>标准差：(10-7.5)/3<br>s = [5,6,7,8,9,10]<br>mu = np.mean(s) # 均值<br>sigma = np.std(s) # 标准差<br>var = np.var(s) # 方差</p>
</blockquote>
<p>go生成符合正态分布随机数：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGaussRandomNum</span><span class="params">(min, max <span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	σ := (<span class="keyword">float64</span>(min) + <span class="keyword">float64</span>(max)) / <span class="number">2</span></span><br><span class="line">	μ := (<span class="keyword">float64</span>(max) - σ) / <span class="number">3</span></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	x := rand.Float64()</span><br><span class="line">	x1 := rand.Float64()</span><br><span class="line">	a := math.Cos(<span class="number">2</span>*math.Pi*x) * math.Sqrt((<span class="number">-2</span>)*math.Log(x1))</span><br><span class="line">	result := a*μ + σ</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">int64</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		result := GetGaussRandomNum(<span class="number">30</span>, <span class="number">60</span>)</span><br><span class="line">		fmt.Println(result)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>python生成符合正态分布随机数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getGaussRandomNum</span>(<span class="params"><span class="built_in">min</span>, <span class="built_in">max</span></span>):</span></span><br><span class="line">    <span class="comment"># 比如 生成   50-100  范围内的正态分布的数，均值为75</span></span><br><span class="line">    <span class="comment"># 据 3 sigma 法则，取标准差为 （100-75）/3 = 8.33</span></span><br><span class="line">    <span class="comment"># mu, sigma = 75, 8.33</span></span><br><span class="line">    <span class="comment"># 30-60 mu=45 sig=(60-45)/3=5</span></span><br><span class="line">    mu = (<span class="built_in">min</span> + <span class="built_in">max</span>) / <span class="number">2</span></span><br><span class="line">    sigma = (<span class="built_in">max</span> - mu) / <span class="number">3</span></span><br><span class="line">    s = np.random.normal(mu, sigma, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="comment"># sns.set_palette(&quot;hls&quot;) #设置所有图的颜色，使用hls色彩空间</span></span><br><span class="line">    <span class="comment"># sns.distplot(s,color=&quot;r&quot;,bins=1000,kde=True) #绘制直方图，color设置颜色，bins设置直方图的划分数</span></span><br><span class="line">    <span class="comment"># plt.show() #显示验证结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getGaussRandomNum1</span>(<span class="params"><span class="built_in">min</span>, <span class="built_in">max</span></span>):</span></span><br><span class="line">    mu = (<span class="built_in">min</span> + <span class="built_in">max</span>) / <span class="number">2</span></span><br><span class="line">    sigma = (<span class="built_in">max</span> - mu) / <span class="number">3</span></span><br><span class="line">    s = random.gauss(mu, sigma)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>百度搜索爬取图片</title>
    <url>/2022/01/12/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>根据百度搜索内容爬取图片</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;根据搜索词下载百度图片&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span>(<span class="params">keyword,page,n</span>):</span></span><br><span class="line">    page=page*n</span><br><span class="line">    keyword=urllib.parse.quote(keyword, safe=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    url_begin= <span class="string">&quot;http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=&quot;</span></span><br><span class="line">    url = url_begin+ keyword + <span class="string">&quot;&amp;pn=&quot;</span> +<span class="built_in">str</span>(page) + <span class="string">&quot;&amp;gsm=&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(page))+<span class="string">&quot;&amp;ct=&amp;ic=0&amp;lm=-1&amp;width=0&amp;height=0&quot;</span></span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_onepage_urls</span>(<span class="params">onepageurl</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(onepageurl).text</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        pic_urls = []</span><br><span class="line">        <span class="keyword">return</span> pic_urls</span><br><span class="line">    pic_urls = re.findall(<span class="string">&#x27;&quot;objURL&quot;:&quot;(.*?)&quot;,&#x27;</span>, html, re.S)</span><br><span class="line">    <span class="keyword">return</span> pic_urls</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down_pic</span>(<span class="params">pic_urls, keyword</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;给出图片链接列表, 下载所有图片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, pic_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(pic_urls):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pic = requests.get(pic_url, timeout=<span class="number">15</span>)</span><br><span class="line">            string =<span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;./&#x27;</span> + keyword):</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./&#x27;</span> + keyword + <span class="string">&#x27;/&#x27;</span> + string, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(pic.content)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;成功下载第%s张图片: %s&#x27;</span> % (<span class="built_in">str</span>(i + <span class="number">1</span>), <span class="built_in">str</span>(pic_url)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                os.mkdir(<span class="string">&#x27;./&#x27;</span> + keyword)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./&#x27;</span> + keyword + <span class="string">&#x27;/&#x27;</span> + string, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(pic.content)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;成功下载第%s张图片: %s&#x27;</span> % (<span class="built_in">str</span>(i + <span class="number">1</span>), <span class="built_in">str</span>(pic_url)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;下载第%s张图片时失败: %s&#x27;</span> % (<span class="built_in">str</span>(i + <span class="number">1</span>), <span class="built_in">str</span>(pic_url)))</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    keyword = <span class="string">&#x27;天海翼&#x27;</span>  <span class="comment"># 关键词, 改为你想输入的词即可, 相当于在百度图片里搜索一样</span></span><br><span class="line">    page_begin=<span class="number">0</span></span><br><span class="line">    page_number=<span class="number">30</span></span><br><span class="line">    image_number=<span class="number">3</span></span><br><span class="line">    all_pic_urls = []</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> page_begin&gt;image_number:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d次请求数据&quot;</span>,[page_begin])</span><br><span class="line">        url=getPage(keyword,page_begin,page_number)</span><br><span class="line">        onepage_urls= get_onepage_urls(url)</span><br><span class="line">        page_begin += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">        all_pic_urls.extend(onepage_urls)</span><br><span class="line"> </span><br><span class="line">    down_pic(<span class="built_in">list</span>(<span class="built_in">set</span>(all_pic_urls)), keyword)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>解析排序算法：十大排序方法的工作原理与性能比较</title>
    <url>/2023/09/10/%E8%A7%A3%E6%9E%90%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>当我们面临对数据进行排序的任务时，计算机科学家们开发了多种排序算法来满足不同的需求。这些排序算法各具特点，适用于不同规模和类型的数据集。在本文中，我们将介绍十大常见的排序算法，并讨论它们的工作原理、时间复杂度以及适用场景。</p>
<span id="more"></span>
<h3 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h3><p>冒泡排序是最简单的排序算法之一。它反复比较相邻的两个元素，如果它们的顺序不正确，就交换它们，直到整个数组都排好序。冒泡排序的时间复杂度为O(n^2)，适用于小型数据集，但在大型数据集上效率较低。</p>
<h3 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h3><p>选择排序将数组分为已排序和未排序两部分，然后选择未排序部分中的最小（或最大）元素，将其放在已排序部分的末尾。选择排序的时间复杂度也是O(n^2)，不稳定，适用于小型数据集。</p>
<h3 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h3><p>插入排序将数组分为已排序和未排序两部分，然后逐个将未排序部分的元素插入已排序部分的正确位置。插入排序的时间复杂度也是O(n^2)，但在某些情况下比冒泡和选择排序更快，特别适用于部分有序的数据。</p>
<h3 id="4-快速排序（Quick-Sort）"><a href="#4-快速排序（Quick-Sort）" class="headerlink" title="4. 快速排序（Quick Sort）"></a>4. 快速排序（Quick Sort）</h3><p>快速排序是一种高效的分治排序算法。它选择一个元素作为“pivot”（基准），将数组分成两部分，然后递归地对这两部分进行排序。快速排序的平均时间复杂度为O(n*log(n))，但在最坏情况下可能达到O(n^2)。</p>
<h3 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h3><p>归并排序也是一种分治排序算法，它将数组逐步分成较小的子数组，然后合并这些子数组以获取最终排序结果。归并排序的时间复杂度为O(n*log(n))，具有稳定性。</p>
<h3 id="6-堆排序（Heap-Sort）"><a href="#6-堆排序（Heap-Sort）" class="headerlink" title="6. 堆排序（Heap Sort）"></a>6. 堆排序（Heap Sort）</h3><p>堆排序使用堆数据结构进行排序。它将数组看作二叉树，构建一个最大堆（或最小堆），然后逐个从堆中取出元素，得到有序序列。堆排序的时间复杂度为O(n*log(n))，不稳定。</p>
<h3 id="7-计数排序（Counting-Sort）"><a href="#7-计数排序（Counting-Sort）" class="headerlink" title="7. 计数排序（Counting Sort）"></a>7. 计数排序（Counting Sort）</h3><p>计数排序是一种非比较排序算法，适用于整数数据范围较小的情况。它通过统计每个元素出现的次数来进行排序，然后根据计数重新构建有序数组。时间复杂度为O(n+k)，其中k是整数范围。</p>
<h3 id="8-桶排序（Bucket-Sort）"><a href="#8-桶排序（Bucket-Sort）" class="headerlink" title="8. 桶排序（Bucket Sort）"></a>8. 桶排序（Bucket Sort）</h3><p>桶排序也是一种非比较排序算法，它将数据分为若干个桶，然后对每个桶内的数据进行排序，最后合并桶。桶排序适用于数据分布均匀的情况，平均时间复杂度为O(n+k)，其中k是桶的数量。</p>
<h3 id="9-基数排序（Radix-Sort）"><a href="#9-基数排序（Radix-Sort）" class="headerlink" title="9. 基数排序（Radix Sort）"></a>9. 基数排序（Radix Sort）</h3><p>基数排序是一种非比较排序算法，适用于整数或字符串排序。它按照元素的位数从低位到高位依次排序，每次排序使用稳定的排序算法。时间复杂度为O(d*(n+k))，其中d是最大位数，k是基数。</p>
<h3 id="10-希尔排序（Shell-Sort）"><a href="#10-希尔排序（Shell-Sort）" class="headerlink" title="10. 希尔排序（Shell Sort）"></a>10. 希尔排序（Shell Sort）</h3><p>希尔排序是一种改进的插入排序算法，它将数组分为若干个子序列，分别进行插入排序，然后逐渐减小子序列的间隔，最终完成排序。希尔排序的时间复杂度取决于间隔序列的选择，平均时间复杂度介于O(n*log(n))和O(n^2)之间。</p>
<p>每种排序算法都有其独特的优势和限制，选择合适的排序算法应根据数据集的规模、数据分布和性能需求来决定。了解这些排序算法的工作原理和特点可以帮助我们在实际应用中做出明智的选择，以满足不同排序任务的需求。无论是对小型数据集进行快速排序还是对大型数据集进行稳定排序，这十大排序算法都为我们提供了多种选择。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>排序算法</category>
      </categories>
  </entry>
</search>
